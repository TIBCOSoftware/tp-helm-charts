{{- if eq .Values.global.tibco.is_replica_region false }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tp-control-plane.consts.appName" . }}-setup
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
  namespace: {{ include "tp-control-plane.consts.namespace" . }}
  labels:
    {{- include "tp-control-plane.shared.labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "tp-control-plane.consts.appName" . }}-setup
      labels:
        {{- include "tp-control-plane.shared.labels.standard" . | nindent 8 }}
        networking.platform.tibco.com/kubernetes-api: enable
        egress.networking.platform.tibco.com/cluster-all: enable
        egress.networking.platform.tibco.com/internet-all: enable
    spec:
      {{- if .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-core-configuration.service-account-name" . }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      {{- if (include "cp-core-configuration.container-registry.secret" .) }}
      imagePullSecrets:
        - name: {{ include "cp-core-configuration.container-registry.secret" . }}
      {{ end }}
      containers:
      - name: tsc-setup
        {{- if .Values.global.containerSecurityContextTpcpcoreJob }}
        securityContext:
          {{- toYaml .Values.global.containerSecurityContextTpcpcoreJob | nindent 10 }}
        {{- end }}
        image: {{ include "cp-core-configuration.container-registry" .}}{{"/"}}{{ include "cp-core-configuration.image-repository" . }}{{"/"}}{{ .Values.global.tibco.image_name.cpScripts }}:{{ include "tp-cp-core-job.generated.buildNumber" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: DB_PREFIX
          value: {{ include "cp-core-configuration.cp-instance-id" . }}_
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBHost
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBPort
        - name: MASTER_PGDATABASE
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_REGION
          value: {{ .Values.global.tibco.region }}
        - name: PSQL_SCRIPTS_LOCATION
          value: /opt/tibco/tsc/scripts/postgres
        - name: BASE_SCRIPTS_LOCATION
          value: /opt/tibco/base/scripts
        - name: TSC_CONFIG_LOCATION
          value: /opt/tibco/tsc/config
        - name: TSC_CERTIFICATES_LOCATION
          value: /opt/tibco/tsc/certificates
        - name: TSC_VOLUME_LOCATION
          value: /private/tsc
        - name: DB_SSL_MODE
          value: {{ .Values.global.external.db_ssl_mode }}
        - name: DB_SSL_CERT_SECRET_NAME
          value: {{ .Values.global.tibco.db_ssl_root_cert_secretname }}
        command:
        - "/bin/bash"
        - "-c"
        - |
          # Check the DB_SSL_MODE
          if [ $DB_SSL_MODE == "disable"  ]; then
            echo "No certificate check required. Proceeding"
          else
            # Check if the Kubernetes secret exists (using kubectl)
            if [ -z $DB_SSL_CERT_SECRET_NAME ]; then
              echo "ERROR: The value for global.tibco.db_ssl_root_cert_secretname cannot be empty when ssl mode is set to $DB_SSL_MODE. Exiting"
              exit 1
            else
              #If the SSL_MODE is not disable then check the presence of the DB SSL secret in the namespace
              if kubectl get secret $DB_SSL_CERT_SECRET_NAME >/dev/null 2>&1; then
                  echo "Kubernetes secret $DB_SSL_CERT_SECRET_NAME found. Proceeding..."
                else
                  echo "ERROR: Certificate secret $DB_SSL_CERT_SECRET_NAME not found. Exiting."
                  exit 2
              fi
            fi
          fi
          /opt/tibco/tsc/scripts/init.sh install
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: store-vol
          mountPath: /private/tsc
          # creating tsc as subfolder in shared EFS. Purpose is to make data privacy between TCS and TSC data on shared EFS.
          subPath: tsc
        - name: secret-volume
          mountPath: /private/tsc/secret-volume
      volumes:
        - name: tmp
          emptyDir: {}
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "cp-core-configuration.pvc-name" . }}
        - name: secret-volume
          secret:
            secretName: {{ .Values.global.external.db_secret_name }}
            items:
            - key: USERNAME
              path: USERNAME
            - key: PASSWORD
              path: PASSWORD



---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tp-control-plane.consts.appName" . }}-upgrade
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
  namespace: {{ include "tp-control-plane.consts.namespace" . }}
  labels:
    {{- include "tp-control-plane.shared.labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "tp-control-plane.consts.appName" . }}-upgrade
      labels:
        {{- include "tp-control-plane.shared.labels.standard" . | nindent 8 }}
        networking.platform.tibco.com/kubernetes-api: enable
        egress.networking.platform.tibco.com/cluster-all: enable
        egress.networking.platform.tibco.com/internet-all: enable
    spec:
      {{- if .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-core-configuration.service-account-name" . }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      {{- if (include "cp-core-configuration.container-registry.secret" .) }}
      imagePullSecrets:
        - name: {{ include "cp-core-configuration.container-registry.secret" . }}
      {{ end }}
      containers:
      - name: tsc-upgrade
        {{- if .Values.global.containerSecurityContextTpcpcoreJob }}
        securityContext:
          {{- toYaml .Values.global.containerSecurityContextTpcpcoreJob | nindent 10 }}
        {{- end }}
        image: {{ include "cp-core-configuration.container-registry" .}}{{"/"}}{{ include "cp-core-configuration.image-repository" . }}{{"/"}}{{ .Values.global.tibco.image_name.cpScripts }}:{{ include "tp-cp-core-job.generated.buildNumber" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: DB_PREFIX
          value: {{ include "cp-core-configuration.cp-instance-id" . }}_
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBHost
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBPort
        - name: MASTER_PGDATABASE
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_REGION
          value: {{ .Values.global.tibco.region }}
        - name: ENVIRONMENT_TYPE
          value: {{ (.Values.global.external.environment | lower) }}
        - name: PSQL_SCRIPTS_LOCATION
          value: /opt/tibco/tsc/scripts/postgres
        - name: BASE_SCRIPTS_LOCATION
          value: /opt/tibco/base/scripts
        - name: TSC_CONFIG_LOCATION
          value: /opt/tibco/tsc/config
        - name: TSC_CERTIFICATES_LOCATION
          value: /opt/tibco/tsc/certificates
        - name: TSC_VOLUME_LOCATION
          value: /private/tsc
        - name: DB_SSL_MODE
          value: {{ .Values.global.external.db_ssl_mode }}
        - name: DB_SSL_CERT_SECRET_NAME
          value: {{ .Values.global.tibco.db_ssl_root_cert_secretname }}
        command:
          - "/bin/bash"
          - "-c"
          - |
            # Check the DB_SSL_MODE
            if [ $DB_SSL_MODE == "disable"  ]; then
              echo "No certificate check required. Proceeding"
            else
              # Check if the Kubernetes secret exists (using kubectl)
              if [ -z $DB_SSL_CERT_SECRET_NAME ]; then
                echo "ERROR: The value for global.tibco.db_ssl_root_cert_secretname cannot be empty when ssl mode is set to $DB_SSL_MODE. Exiting"
                exit 1
              else
                #If the SSL_MODE is not disable then check the presence of the DB SSL secret in the namespace
                if kubectl get secret $DB_SSL_CERT_SECRET_NAME >/dev/null 2>&1; then
                    echo "Kubernetes secret $DB_SSL_CERT_SECRET_NAME found. Proceeding..."
                  else
                    echo "ERROR: Certificate secret $DB_SSL_CERT_SECRET_NAME not found. Exiting."
                    exit 2
                fi
              fi
            fi
            /opt/tibco/tsc/scripts/init.sh upgrade
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: store-vol
          mountPath: /private/tsc
          subPath: tsc
        - name: secret-volume
          mountPath: /private/tsc/secret-volume
      volumes:
        - name: tmp
          emptyDir: {}
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "cp-core-configuration.pvc-name" . }}
        - name: secret-volume
          secret:
            secretName: {{ .Values.global.external.db_secret_name }}
            items:
            - key: USERNAME
              path: USERNAME
            - key: PASSWORD
              path: PASSWORD



---


apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tp-control-plane.consts.appName" . }}-cleanup
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
  namespace: {{ include "tp-control-plane.consts.namespace" . }}
  labels:
    {{- include "tp-control-plane.shared.labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "tp-control-plane.consts.appName" . }}-cleanup
      labels:
        {{- include "tp-control-plane.shared.labels.standard" . | nindent 8 }}
        networking.platform.tibco.com/kubernetes-api: enable
        egress.networking.platform.tibco.com/cluster-all: enable
        egress.networking.platform.tibco.com/internet-all: enable
    spec:
      {{- if .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-core-configuration.service-account-name" . }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      {{- if (include "cp-core-configuration.container-registry.secret" .) }}
      imagePullSecrets:
        - name: {{ include "cp-core-configuration.container-registry.secret" . }}
      {{ end }}
      containers:
      - name: tsc-cleanup
        {{- if .Values.global.containerSecurityContextTpcpcoreJob }}
        securityContext:
          {{- toYaml .Values.global.containerSecurityContextTpcpcoreJob | nindent 10 }}
        {{- end }}
        image: {{ include "cp-core-configuration.container-registry" .}}{{"/"}}{{ include "cp-core-configuration.image-repository" . }}{{"/"}}{{ .Values.global.tibco.image_name.cpScripts }}:{{ include "tp-cp-core-job.generated.buildNumber" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: DB_PREFIX
          value: {{ include "cp-core-configuration.cp-instance-id" . }}_
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBHost
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBPort
        - name: MASTER_PGDATABASE
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_REGION
          value: {{ .Values.global.tibco.region }}
        - name: DeleteDBOnUninstall
          value: {{ .Values.cp.deleteDBOnUninstall | quote }}
        - name: PSQL_SCRIPTS_LOCATION
          value: /opt/tibco/tsc/scripts/postgres
        - name: BASE_SCRIPTS_LOCATION
          value: /opt/tibco/base/scripts
        - name: TSC_CONFIG_LOCATION
          value: /opt/tibco/tsc/config
        - name: TSC_CERTIFICATES_LOCATION
          value: /opt/tibco/tsc/certificates
        - name: TSC_VOLUME_LOCATION
          value: /private/tsc
        command: [ "/bin/bash", "-c" ]
        args:
        - "/opt/tibco/tsc/scripts/init.sh delete"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: store-vol
          mountPath: /private/tsc
          subPath: tsc
        - name: secret-volume
          mountPath: /private/tsc/secret-volume
      volumes:
        - name: tmp
          emptyDir: {}
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "cp-core-configuration.pvc-name" . }}
        - name: secret-volume
          secret:
            secretName: {{ .Values.global.external.db_secret_name }}
            items:
            - key: USERNAME
              path: USERNAME
            - key: PASSWORD
              path: PASSWORD


---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tp-control-plane.consts.appName" . }}-rollback
  annotations:
    "helm.sh/hook": pre-rollback
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
  namespace: {{ include "tp-control-plane.consts.namespace" . }}
  labels:
    {{- include "tp-control-plane.shared.labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "tp-control-plane.consts.appName" . }}-rollback
      labels:
        {{- include "tp-control-plane.shared.labels.standard" . | nindent 8 }}
        networking.platform.tibco.com/kubernetes-api: enable
        egress.networking.platform.tibco.com/cluster-all: enable
        egress.networking.platform.tibco.com/internet-all: enable
    spec:
      {{- if .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-core-configuration.service-account-name" . }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      {{- if (include "cp-core-configuration.container-registry.secret" .) }}
      imagePullSecrets:
        - name: {{ include "cp-core-configuration.container-registry.secret" . }}
      {{ end }}
      containers:
      - name: tsc-rollback
        {{- if .Values.global.containerSecurityContextTpcpcoreJob }}
        securityContext:
          {{- toYaml .Values.global.containerSecurityContextTpcpcoreJob | nindent 10 }}
        {{- end }}
        image: {{ include "cp-core-configuration.container-registry" .}}{{"/"}}{{ include "cp-core-configuration.image-repository" . }}{{"/"}}{{ .Values.global.tibco.image_name.cpScripts }}:{{ include "tp-cp-core-job.generated.buildNumber" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: DB_PREFIX
          value: {{ include "cp-core-configuration.cp-instance-id" . }}_
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBHost
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBPort
        - name: MASTER_PGDATABASE
          valueFrom:
            configMapKeyRef:
              name: {{ include "tp-cp-core.consts.cp.db.configuration" . }}
              key: DBName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_REGION
          value: {{ .Values.global.tibco.region }}
        - name: PSQL_SCRIPTS_LOCATION
          value: /opt/tibco/tsc/scripts/postgres
        - name: BASE_SCRIPTS_LOCATION
          value: /opt/tibco/base/scripts
        - name: TSC_CONFIG_LOCATION
          value: /opt/tibco/tsc/config
        - name: TSC_CERTIFICATES_LOCATION
          value: /opt/tibco/tsc/certificates
        - name: TSC_VOLUME_LOCATION
          value: /private/tsc
        command: [ "/bin/bash", "-c" ]
        args:
        - "/opt/tibco/tsc/scripts/init.sh rollback"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: store-vol
          mountPath: /private/tsc
          subPath: tsc
        - name: secret-volume
          mountPath: /private/tsc/secret-volume
      volumes:
        - name: tmp
          emptyDir: {}
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "cp-core-configuration.pvc-name" . }}
        - name: secret-volume
          secret:
            secretName: {{ .Values.global.external.db_secret_name }}
            items:
            - key: USERNAME
              path: USERNAME
            - key: PASSWORD
              path: PASSWORD

---

{{- if eq .Values.global.tibco.self_hosted_deployment true }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tp-control-plane.consts.appName" . }}-security-certs
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "20"
    "helm.sh/hook-delete-policy": before-hook-creation
    description: "Job to create self-signed certs and secrets for IdM and IdP services in self-hosted deployment."
  namespace: {{ include "tp-control-plane.consts.namespace" . }}
  labels:
    {{- include "tp-control-plane.shared.labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "tp-control-plane.consts.appName" . }}-security-certs
      labels:
        {{- include "tp-control-plane.shared.labels.standard" . | nindent 8 }}
        networking.platform.tibco.com/kubernetes-api: enable
    spec:
      {{- if .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-core-configuration.service-account-name" . }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      {{- if (include "cp-core-configuration.container-registry.secret" .) }}
      imagePullSecrets:
        - name: {{ include "cp-core-configuration.container-registry.secret" . }}
      {{ end }}
      containers:
      - name: tsc-setup
        {{- if .Values.global.containerSecurityContextTpcpcoreJob }}
        securityContext:
          {{- toYaml .Values.global.containerSecurityContextTpcpcoreJob | nindent 10 }}
        {{- end }}
        image: {{ include "cp-core-configuration.container-registry" .}}{{"/"}}{{ include "cp-core-configuration.image-repository" . }}{{"/"}}{{ .Values.global.tibco.image_name.cpScripts }}:{{ include "tp-cp-core-job.generated.buildNumber" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CERT_SCRIPTS_LOCATION
          value: /opt/tibco/tsc/scripts/certs
        - name: TSC_CONFIG_LOCATION
          value: /private/tsc/config
        command: [ "/bin/bash", "-c" ]
        args:
        - "/opt/tibco/tsc/scripts/certs/generate-self-signed-cert.sh idm && /opt/tibco/tsc/scripts/certs/generate-self-signed-cert.sh idp"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: store-vol
          mountPath: /private/tsc
          subPath: tsc
      volumes:
        - name: tmp
          emptyDir: {}
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "cp-core-configuration.pvc-name" . }}
{{- end }}

---

{{- if eq .Values.global.tibco.self_hosted_deployment true }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tp-control-plane.consts.appName" . }}-uninstall-self-signed-cert
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "15" # weight 15 will ensure that this job will be run after the chart clean-up job has completed
    "helm.sh/hook-delete-policy": before-hook-creation
    description: "Job to delete self-signed certificates and secrets for IdM and IdP services in self-hosted deployment."
  namespace: {{ include "tp-control-plane.consts.namespace" . }}
  labels:
    {{- include "tp-control-plane.shared.labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "tp-control-plane.consts.appName" . }}-uninstall-self-signed-cert
      labels:
        {{- include "tp-control-plane.shared.labels.standard" . | nindent 8 }}
        networking.platform.tibco.com/kubernetes-api: enable
    spec:
      {{- if .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-core-configuration.service-account-name" . }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      {{- if (include "cp-core-configuration.container-registry.secret" .) }}
      imagePullSecrets:
        - name: {{ include "cp-core-configuration.container-registry.secret" . }}
      {{ end }}
      containers:
      - name: tsc-setup
        {{- if .Values.global.containerSecurityContextTpcpcoreJob }}
        securityContext:
          {{- toYaml .Values.global.containerSecurityContextTpcpcoreJob | nindent 10 }}
        {{- end }}
        image: {{ include "cp-core-configuration.container-registry" .}}{{"/"}}{{ include "cp-core-configuration.image-repository" . }}{{"/"}}{{ .Values.global.tibco.image_name.cpScripts }}:{{ include "tp-cp-core-job.generated.buildNumber" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CERT_SCRIPTS_LOCATION
          value: /opt/tibco/tsc/scripts/certs
        - name: TSC_CONFIG_LOCATION
          value: /private/tsc/config
        command: [ "/bin/bash", "-c" ]
        args:
        - "/opt/tibco/tsc/scripts/certs/uninstall-self-signed-cert.sh"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: store-vol
          mountPath: /private/tsc
          subPath: tsc
      volumes:
        - name: tmp
          emptyDir: {}
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "cp-core-configuration.pvc-name" . }}
{{- end }}

---
{{- else }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tp-control-plane.consts.appName" . }}-mount
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
  namespace: {{ include "tp-control-plane.consts.namespace" . }}
  labels:
    {{- include "tp-control-plane.shared.labels.standard" . | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "tp-control-plane.consts.appName" . }}-mount
      labels:
        {{- include "tp-control-plane.shared.labels.standard" . | nindent 8 }}
    spec:
      {{- if .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-core-configuration.service-account-name" . }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      {{- if (include "cp-core-configuration.container-registry.secret" .) }}
      imagePullSecrets:
        - name: {{ include "cp-core-configuration.container-registry.secret" . }}
      {{ end }}
      containers:
      - name: tsc-mount
        {{- if .Values.global.containerSecurityContextTpcpcoreJob }}
        securityContext:
          {{- toYaml .Values.global.containerSecurityContextTpcpcoreJob | nindent 10 }}
        {{- end }}
        image: {{ include "cp-core-configuration.container-registry" .}}{{"/"}}{{ include "cp-core-configuration.image-repository" . }}{{"/"}}{{ .Values.global.tibco.image_name.cpScripts }}:{{ include "tp-cp-core-job.generated.buildNumber" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: TSC_CONFIG_LOCATION
          value: /opt/tibco/tsc/config
        - name: TSC_CERTIFICATES_LOCATION
          value: /opt/tibco/tsc/certificates
        - name: TSC_VOLUME_LOCATION
          value: /private/tsc
        command: [ "/bin/bash", "-c" ]
        args:
        - "/opt/tibco/tsc/scripts/init.sh mount"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: store-vol
          mountPath: /private/tsc
          subPath: tsc
      volumes:
        - name: tmp
          emptyDir: {}
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "cp-core-configuration.pvc-name" . }}

---
{{- end }}
