# Copyright Â© 2025. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.

global:
  tibco:
    dataPlaneId: "dataplaneid"
    # Provide the name of primary namespace where dp-core-infrastrcuture is to be deployed
    # This namespace has the service account for which the role-bindig will be created for primary namespace and additional namespaces
    # primaryNamespaceName: "abcd"
    # Provide the name of the service account from primary namespace
    # This will be used for dp-core-infrastrcuture, capability provisioning, application deployment
    # serviceAccount: "sa"
    # enableClusterScopedPerm flag creates ClusterRole and ClusterRole binding in the primary namespace, disabling this will create only role and rolebinding
    enableClusterScopedPerm: true

    containerRegistry:
      url: ""
      repository: "tibco-platform-docker-prod"
      # [optional] Create a imagePullSecret named <dpId> for private container registry.
      username: "test"
      password: "test"
      # email: "tibco-plt@cloud.com"

    enableResourceConstraints: true

rbac:
  # Use an already existing service account present in the primary namespace
  # Default value is true. Possible values are true, false
  createServiceAccount: true
  # RBACs for different capabilities
  # Default value is true. Possible values are true, false
  bwce: true
  bw5ce: true
  flogo: true
  ems: true
  pulsar: true
  devHub: true
  o11y: true
  # Conditional RBACS for ingress controller
  ingressController:
    kong: true
    traefik: true
    openshiftRouter: true

networkPolicy:
  # Flag to enable or disable creating default network policies for a namespace
  # Default value is false. Possible values are true, false
  create: false
  # Required value if the network policies are to be enabled
  # Create deprecated network policies
  createDeprecatedPolicies: true
  # Flag to enable or disable creating cluster scoped network policies
  createClusterScopePolicies: false
  # Flag to enable or disable creating internet scoped network policies
  createInternetScopePolicies: false
  # Network policies for access to the database, if no values are provided, the database policy will not be created
  database:
    CIDR: ""
    port: ""
  # Network policies for access to the log server, if no values are provided, the log server policy will not be created
  logServer:
    CIDR: ""
    port: ""
  # Network policies for access to Prometheus, if no values are provided, the Prometheus policy will not be created
  prometheus:
    CIDR: ""
    port: ""
  # Network policies for access to the container registry, if no values are provided, the container registry policy will not be created
  containerRegistry:
    CIDR: ""
    port: ""
  # Network policies for access to the Helm registry, if no values are provided, the Helm registry policy will not be created
  helmRegistry:
    CIDR: ""
    port: ""
  # Network policies for access to the proxy, if no values are provided, the proxy policy will not be created
  proxy:
    CIDR: ""
    port: ""
  # Network policies for access to the Kubernetes API server, if no values are provided, the Kubernetes API server policy will not be created
  kubeApiServer:
    CIDR: ""
    port: ""
  # Network policies for access to the control plane, if no values are provided, the control plane policy will not be created
  # This configuration accepts an array of values, which is particularly useful when the Service and Tunnel domains are hosted on different load balancers.
  controlPlane:
    # egress:
    # - to:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
  # BW fetching data from the TEA domain and other use cases for TEA domain
  tea:
    # ingress:
    # - from:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
    # egress:
    # - to:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
  # Clients accessing EMS servers and otehr use cases of EMS
  msgInfra:
    # ingress:
    # - from:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
    # egress:
    # - to:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
  # Hawk use case in Customer Infrastructure (EMS and RV) for fetching capability (BW5/BE) data
  hawkInfra:
    # ingress:
    # - from:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
    # egress:
    # - to:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
  # UserApps network policy
  userApps:
    # ingress:
    # - from:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
    # egress:
    # - to:
    #   - ipBlock:
    #       cidr: ""
    #   ports:
    #   - port: ""
    #     protocol: TCP
  # node CIDR IP block
  nodeCidrIpBlock: ""
  # pod CIDR IP block
  podCidrIpBlock: ""
  # service CIDR IP block
  serviceCidrIpBlock: "172.20.0.0/16"
  # Network policies for access kube-dns, if no values are provided, the kube-dns policy will be created for a vanilla k8s cluster
  kubeDns:
    egress:
    - to:
      - namespaceSelector: {}
        podSelector:
          matchLabels:
            k8s-app: kube-dns
      ports:
      - protocol: UDP
        port: 53
      - protocol: TCP
        port: 53

haproxy:
  nameOverride: haproxy
  fullnameOverride: cpdpproxy
  enabled: true
  rbac:
    create: false
  serviceAccount:
    create: false
    name: "{{ .Values.global.tibco.serviceAccount }}"
  controller:
    ingressClassResource:
      name: tibco-dp-{{ .Values.global.tibco.dataPlaneId }}
    ingressClass: tibco-dp-{{ .Values.global.tibco.dataPlaneId }}
    extraArgs:
    - --namespace-whitelist={{ .Release.Namespace }}
    service:
      type: ClusterIP
      enabled: true
    existingImagePullSecret: "{{ .Values.global.tibco.dataPlaneId }}"
    extraLabels:
      platform.tibco.com/dataplane-id: "{{ .Values.global.tibco.dataPlaneId }}"
      platform.tibco.com/workload-type: "infra"
    podLabels:
      networking.platform.tibco.com/kubernetes-api: enable
      platform.tibco.com/dataplane-id: "{{ .Values.global.tibco.dataPlaneId }}"
      platform.tibco.com/workload-type: "infra"
config:
  enabled: true
