#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if or .Values.components.proxy .Values.extra.proxy }}
{{-  $apdParams := include "need.msg.apd.params" . | fromYaml }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  annotations:
    {{ include "msg.dp.mon.annotations" . | indent 4 }}
    platform.tibco.com/quorum-min: "1"
    platform.tibco.com/replica-min: "2"
    platform.tibco.com/quorum-strategy: "active-active"
    platform.tibco.com/is-in-quorum: "http://localhost:8080/status.html"
  labels:
    tib-msg-stsname: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
    app.kubernetes.io/name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.proxy.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
  {{- if not .Values.proxy.autoscaling.enabled }}
  # replicas: {{ .Values.proxy.replicaCount }}
  replicas: {{ .Values.proxy.replicaCount | default (include "apd.sts.replicas" (dict "comp" "proxy" "param" $apdParams ))}}
  {{- end }}
  selector:
    matchLabels:
      tib-msg-stsname: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.proxy.component }}
  updateStrategy:
    type: OnDelete
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        tib-msg-stsname: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
        app.kubernetes.io/name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
        {{- include "pulsar.template.labels" . | nindent 8 }}
        {{ include "msg.dp.net.all" . | indent 8}}
        component: {{ .Values.proxy.component }}
        platform.tibco.com/scrape_o11y: "true"
{{- include "apd.sts.size.labels" (dict "comp" "proxy" "param" $apdParams ) | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.proxy.ports.http }}"
        prometheus.io/path: /metrics/
        {{- if .Values.proxy.restartPodsOnConfigMapChange }}
        checksum/config: {{ include (print $.Template.BasePath "/proxy-configmap.yaml") . | sha256sum }}
        {{- end }}
{{- with .Values.proxy.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      enableServiceLinks: false
      nodeSelector:
        kubernetes.io/os: linux
    {{- if .Values.proxy.nodeSelector }}
{{ toYaml .Values.proxy.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.proxy.tolerations }}
      tolerations:
{{ toYaml .Values.proxy.tolerations | indent 8 }}
    {{- end }}
      topologySpreadConstraints:
{{ include "msg.node.skew" (dict "params" $apdParams.apd "comp" .Values.proxy.component ) | indent 8}}
{{ include "msg.zone.skew" (dict "params" $apdParams.apd "comp" .Values.proxy.component ) | indent 8}}
      terminationGracePeriodSeconds: {{ .Values.proxy.gracePeriod }}
      serviceAccountName: "{{ $apdParams.apd.proxy.serviceAccount }}"
      {{ include "msg.dp.security.pod" $apdParams | nindent 6 }}
      initContainers:
      # This init container will wait for zookeeper to be ready before
      # deploying the bookies
      - name: wait-zookeeper-ready
        image: "{{ template "pulsar.imageFullName" (dict "image" .Values.images.proxy "root" .) }}"
        imagePullPolicy: "{{ template "pulsar.imagePullPolicy" (dict "image" .Values.images.proxy "root" .) }}"
        {{ include "msg.dp.security.container" $apdParams | nindent 8 }}
        resources:
{{- include "apd.sts.resources" (dict "comp" "proxy-init" "param" $apdParams "Values" .Values ) | nindent 10 }}
        command: ["bash", "-c"]
        args:
          - >-
            {{- if $zk:=.Values.pulsar_metadata.userProvidedZookeepers }}
            until bin/pulsar zookeeper-shell -server {{ $zk }} ls {{ or .Values.metadataPrefix "/" }}; do
              echo "user provided zookeepers {{ $zk }} are unreachable... check in 3 seconds ..." && sleep 3;
            done;
            {{ else }}
            until bin/pulsar zookeeper-shell -server {{ template "pulsar.configurationStore.service" . }} get {{ .Values.metadataPrefix }}/admin/clusters/{{ template "pulsar.cluster.name" . }}; do
              sleep 3;
            done;
            {{- end}}
        env:
        {{ include "msg.dp.stdenv" $apdParams | nindent 8 }}
        volumeMounts:
        - mountPath: /pulsar/logs
          {{ include "msg.pv.vol.mount" $apdParams.apd.logs | nindent 10 }}
      # This init container will wait for at least one broker to be ready before
      # deploying the proxy
      - name: wait-broker-ready
        image: "{{ template "pulsar.imageFullName" (dict "image" .Values.images.proxy "root" .) }}"
        imagePullPolicy: "{{ template "pulsar.imagePullPolicy" (dict "image" .Values.images.proxy "root" .) }}"
        {{ include "msg.dp.security.container" $apdParams | nindent 8 }}
        resources:
{{- include "apd.sts.resources" (dict "comp" "proxy-init" "param" $apdParams "Values" .Values ) | nindent 10 }}
        command: ["bash", "-c"]
        args:
          - >-
            set -e;
            brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
            until [ ${brokerServiceNumber} -ge 1 ]; do
              echo "pulsar cluster {{ template "pulsar.cluster.name" . }} isn't initialized yet ... check in 10 seconds ...";
              sleep 10;
              brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
            done;
        env:
        {{ include "msg.dp.stdenv" $apdParams | nindent 8 }}
        volumeMounts:
        - mountPath: /pulsar/logs
          {{ include "msg.pv.vol.mount" $apdParams.apd.logs | nindent 10 }}
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
        image: "{{ template "pulsar.imageFullName" (dict "image" .Values.images.proxy "root" .) }}"
        imagePullPolicy: "{{ template "pulsar.imagePullPolicy" (dict "image" .Values.images.proxy "root" .) }}"
        {{ include "msg.dp.security.container" $apdParams | nindent 8 }}
        {{- if .Values.proxy.probe.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.proxy.ports.containerPorts.http }}
          initialDelaySeconds: {{ .Values.proxy.probe.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.proxy.probe.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.proxy.probe.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.proxy.probe.liveness.failureThreshold }}
        {{- end }}
        {{- if .Values.proxy.probe.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.proxy.ports.containerPorts.http }}
          initialDelaySeconds: {{ .Values.proxy.probe.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.proxy.probe.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.proxy.probe.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.proxy.probe.readiness.failureThreshold }}
        {{- end }}
        {{- if .Values.proxy.probe.startup.enabled }}
        startupProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.proxy.ports.containerPorts.http }}
          initialDelaySeconds: {{ .Values.proxy.probe.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.proxy.probe.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.proxy.probe.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.proxy.probe.startup.failureThreshold }}
        {{- end }}
        resources:
{{- include "apd.sts.resources" (dict "comp" "proxy" "param" $apdParams "Values" .Values ) | nindent 10 }}
        command: ["bash", "-c"]
        args:
        - >
          source /boot/pulsar-setup.bash /pulsar/bin/pulsar proxy ;
        {{- if .Values.proxy.additionalCommand }}
          {{ .Values.proxy.additionalCommand }}
        {{- end }}
          bin/apply-config-from-env.py conf/proxy.conf &&
          echo "OK" > /pulsar/logs/status &&
          OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec /usr/local/watchdog/bin/watchdog
        ports:
        # prometheus needs to access /metrics endpoint
        - name: sts-http
          containerPort: {{ .Values.proxy.ports.containerPorts.http }}
        {{- if or (not .Values.tls.enabled) (not .Values.tls.proxy.enabled) }}
        - name: "sts-{{ .Values.tcpPrefix }}pulsar"
          containerPort: {{ .Values.proxy.ports.pulsar }}
        {{- end }}
        {{- if and (.Values.tls.enabled) (.Values.tls.proxy.enabled) }}
        - name: sts-https
          containerPort: {{ .Values.proxy.ports.containerPorts.https }}
        - name: "sts-{{ .Values.tlsPrefix }}pulsarssl"
          containerPort: {{ .Values.proxy.ports.pulsarssl }}
        {{- end }}
        env:
        {{ include "msg.dp.stdenv" $apdParams | nindent 8 }}
        - name: STS_NAME
          value: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
        - name: POD_DISK_MON
          value: "/pulsar/data,/pulsar/logs"
        - name: PULSAR_LOG_FILE
          value: $(MY_POD_NAME).log
        - name: PULSAR_LOG_DIR
          value: /pulsar/logs
        - name: PULSAR_LOG_APPENDER
          value: Console
{{- if .Values.proxy.extreEnvs }}
{{ toYaml .Values.proxy.extreEnvs | indent 8 }}
{{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
        volumeMounts:
          - mountPath: /boot
            {{ include "msg.pv.vol.mount" $apdParams.apd.boot | nindent 12 }}
          - mountPath: /pulsar/logs
            {{ include "msg.pv.vol.mount" $apdParams.apd.logs | nindent 12 }}
          - mountPath: /pulsar/conf
            {{ include "msg.pv.vol.mount" $apdParams.apd.conf | nindent 12 }}
          - mountPath: /pulsar/conf/log4j2.yaml
            {{ include "msg.pv.vol.mount" $apdParams.apd.log4j2 | nindent 12 }}
          - mountPath: /var/tmp
            {{ include "msg.pv.vol.mount" $apdParams.apd.vartmp | nindent 12 }}
        {{- if or .Values.proxy.extraVolumeMounts .Values.auth.authentication.enabled (and .Values.tls.enabled (or .Values.tls.proxy.enabled .Values.tls.broker.enabled)) }}
          {{- if .Values.auth.authentication.enabled }}
          {{- if eq .Values.auth.authentication.provider "jwt" }}
          - mountPath: "/pulsar/keys"
            name: token-keys
            readOnly: true
          - mountPath: "/pulsar/tokens"
            name: proxy-token
            readOnly: true
          {{- end }}
          {{- end }}
          {{- if .Values.tls.proxy.enabled }}
          - mountPath: "/pulsar/certs/proxy"
            name: proxy-certs
            readOnly: true
          {{- end}}
          {{- if .Values.tls.enabled }}
          - mountPath: "/pulsar/certs/ca"
            name: ca
            readOnly: true
          {{- end}}
          {{- if .Values.proxy.extraVolumeMounts }}
{{ toYaml .Values.proxy.extraVolumeMounts | indent 10 }}
          {{- end }}
      {{- end}}
      {{- include "pulsar.imagePullSecrets" . | nindent 6}}
      volumes:
      {{ include "msg.pv.vol.def" $apdParams.apd.boot | nindent 6 }}
        {{- if eq "use-pulsar-data" $apdParams.apd.logs.storageType }}
      {{ include "msg.pv.vol.def" $apdParams.apd.msgData | nindent 6 }}
        {{- else }}
      {{ include "msg.pv.vol.def" $apdParams.apd.logs | nindent 6 }}
        {{- end }}
      {{ include "msg.pv.vol.def" $apdParams.apd.log4j2 | nindent 6 }}
      {{ include "msg.pv.vol.def" $apdParams.apd.vartmp | nindent 6 }}
      {{- if or .Values.proxy.extraVolumes .Values.auth.authentication.enabled (and .Values.tls.enabled .Values.tls.proxy.enabled) }}
        {{- if .Values.proxy.extraVolumes }}
{{ toYaml .Values.proxy.extraVolumes | indent 8 }}
        {{- end }}
        {{- if .Values.auth.authentication.enabled }}
        {{- if eq .Values.auth.authentication.provider "jwt" }}
        - name: token-keys
          secret:
            {{- if not .Values.auth.authentication.jwt.usingSecretKey }}
            secretName: "{{ .Release.Name }}-token-asymmetric-key"
            {{- end}}
            {{- if .Values.auth.authentication.jwt.usingSecretKey }}
            secretName: "{{ .Release.Name }}-token-symmetric-key"
            {{- end}}
            items:
              {{- if .Values.auth.authentication.jwt.usingSecretKey }}
              - key: SECRETKEY
                path: token/secret.key
              {{- else }}
              - key: PUBLICKEY
                path: token/public.key
              {{- end}}
        - name: proxy-token
          secret:
            secretName: "{{ .Release.Name }}-token-{{ .Values.auth.superUsers.proxy }}"
            items:
              - key: TOKEN
                path: proxy/token
        {{- end}}
        {{- end}}
        {{- if .Values.tls.proxy.enabled }}
        - name: ca
          secret:
            secretName: "{{ .Release.Name }}-{{ .Values.tls.ca_suffix }}"
            items:
              - key: ca.crt
                path: ca.crt
        - name: proxy-certs
          secret:
            secretName: "{{ .Release.Name }}-{{ .Values.tls.proxy.cert_name }}"
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
        {{- end}}
      {{- end}}
  volumeClaimTemplates:
        {{- if eq "use-pulsar-data" $apdParams.apd.logs.storageType }}
  {{ include "msg.pv.vol.vct" $apdParams.apd.msgData | nindent 2 }}
        {{- else }}
  {{ include "msg.pv.vol.vct" $apdParams.apd.logs | nindent 2 }}
        {{- end }}
{{- end }}
