#
# Copyright Â© 2023 - 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#


# Bundle apps and their important data.

compute-services:
  enabled: true
  dpMetadata:
    dpCoreInfrastructureChartVersion: "1.6.2"
    dpCoreInfrastructureAppVersion: "1.6.0"
    dpConfigureNamespaceChartVersion: "1.6.1"
    dpConfigureNamespaceAppVersion: "1.6.0"

hybrid-proxy:
  # switch to false to disable tp-hybrid-proxy
  enabled: true
  # HPO replica count
  replicaCount: "1"

router-operator:
  enabled: true

resource-set-operator:
  enabled: true

otel-collector:
  enabled: false

# global values used by the chart. These values gets propagated to sub-charts.
global:
  tibco:
    logging:
      fluentbit:
        enabled: true
    # Honor the service account if set, otherwise chart will create a new service account "control-plane-sa"
    serviceAccount: ""
    # k8s rbac required by the service account
    rbac:
      # create the rbac for bootstrap resources.
      # set to true to create rbac resources for the service account (cluster role and binding), set to false if the service account already have the rbacs
      infra: true
    containerRegistry:
      url: ""  # container registry url
      username: ""
      password: ""
      repository: "tibco-platform-docker-prod"  # repository

    # Flag to enable or disable creating default network policies for a namespace
    # Default value is false. Possible values are true, false
    createNetworkPolicy: false
    networkPolicy:
      # Network policies for access kube-dns, if no values are provided, the kube-dns policy will be created for a vanilla k8s cluster
      kubeDns:
        egress:
        - to:
          - namespaceSelector: {}
            podSelector:
              matchLabels:
                k8s-app: kube-dns
          ports:
          - protocol: UDP
            port: 53
          - protocol: TCP
            port: 53
    # control plane instance Id. Ex: prod, stag, p01, s01. This is to identify multiple cp installation in same cluster.
    # lowercase alphanumeric string of max 5 chars
    controlPlaneInstanceId: ""

    useSingleNamespace: true

    enableResourceConstraints: true

    proxy:
      httpProxy: ""
      httpsProxy: ""
      noProxy: ""

  external:
    dnsTunnelDomain: ""
    dnsDomain: ""
    clusterInfo:
      nodeCIDR: ""
      podCIDR: ""
      serviceCIDR: "172.20.0.0/16"

#    logserver:
#      endpoint: ""
#      username: ""
#      index: ""
#      password: ""

    storage:
      resources:
        requests:
          storage: 2Gi
      # 1. to create/use volumeName, uncomment storageClassName and set matching value as volume
      # 2. to use default storageClass, keep storageClassName key commented
      # 3  to use pre-configured storageClass, uncomment storageClassName and pass the value
      # volumeName: ""
      # storageClassName: ""
