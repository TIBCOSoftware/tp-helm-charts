#
# Copyright Â© 2023 - 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#


apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hybrid-proxy.consts.appName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "hybrid-proxy.shared.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.replicaCount }}
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "hybrid-proxy.shared.labels.selector" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "hybrid-proxy.shared.labels.standard" . | nindent 8 }}
        networking.platform.tibco.com/kubernetes-api: enable
        ingress.networking.platform.tibco.com/internet-access: enable
      annotations:
{{- if .Values.global.tibco.logging.fluentbit.enabled }}
        checksum/config: {{ include (print $.Template.BasePath "/fluentbit-configmap.yaml") . | sha256sum }}
{{- end }}
    spec:
    {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: 600
    {{- if .Values.global.tibco.serviceAccount }}
      serviceAccountName: {{ .Values.global.tibco.serviceAccount | quote }}
    {{- else }}
      serviceAccountName: {{ include "hybrid-proxy.consts.serviceAccount" . }}
    {{- end }} 
      nodeSelector:
        kubernetes.io/os: linux
      topologySpreadConstraints:
      {{- $root := . }}
      {{- range $key, $value := .Values.topologySpreadConstraints }}
        - maxSkew: {{ $value.maxSkew }}
          topologyKey: {{ $value.topologyKey | quote }}
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              {{- include "hybrid-proxy.shared.labels.selector" $root | nindent 14 }}
      {{- end }}
      containers:
      - name: hybrid-proxy
        image: {{ include "hybrid-proxy.image.registry" .}}{{"/"}}{{ include "hybrid-proxy.image.repository" .}}{{"/"}}{{ .Values.image.name }}:{{ .Values.image.tag}}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.securityContext.platformHybridProxy }}
        securityContext:
          {{- toYaml .Values.securityContext.platformHybridProxy | nindent 10 }}
        {{- end }} 
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 9443
          name: webhook
        - containerPort: 88
          name: api
          protocol: TCP
        {{/* 443 is opened on node by security groups, hence exposing the container ports */}}
        - containerPort: 443
          name: tunnel
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /version
            port: 88
          failureThreshold: 60 # 60 * 5sec = 5min
          successThreshold: 1
          timeoutSeconds: 3
          initialDelaySeconds: 1
          periodSeconds: 5
        # liveness does not start after readiness passes. Instead it starts in parallel. Use initialDelaySeconds accordingly
        # TODO: might need revisiting in future K8s versions. See https://github.com/kubernetes/kubernetes/issues/27114
        livenessProbe:
          httpGet:
            path: /version
            port: 88
          failureThreshold: 1
          successThreshold: 1
          timeoutSeconds: 3
          initialDelaySeconds: 301 # do not start for 5min 1sec, after max wait time from readiness probe
          periodSeconds: 5
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-c", "sleep 300"] # allow some time to complete in-flight API calls and to have new NLB targets become healthy
        env:
        - name: WAIT_FOR_BACKEND_POD_TO_BE_READY
          value: "{{ .Values.waitForBackendPodToBeReady }}"
        - name: IS_CIC2_ENV
          value: "true"
      {{- if .Values.global.tibco.useSingleNamespace }}
        - name: WATCH_NAMESPACE
          value: "{{ .Release.Namespace }}"
      {{- end }}
        - name: HTTP_PORT_TUNNEL
          value: '443'
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_APP_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/name']
      {{- if .Values.global.tibco.useSingleNamespace }}
        - name: WATCH_NAMESPACE_PREFIX
          value: "{{ .Release.Namespace }}"
      {{- else }}
        - name: WATCH_NAMESPACE_PREFIX
          value: {{ .Values.global.tibco.controlPlaneInstanceId }}    
      {{- end }}
        - name: SETTINGS_PROPERTIES_VOLUME_PATH
          value: "/etc/config/settings.properties"
        volumeMounts:
          - name: settings-config-volume
            mountPath: "/etc/config"
{{- if .Values.enableWebHooks }}
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
{{- end }}
{{- if .Values.global.tibco.logging.fluentbit.enabled }}
      - name: fluentbit
        image: {{ include "hybrid-proxy.image.registry" .}}{{"/"}}{{ include "hybrid-proxy.image.repository" .}}{{"/"}}{{ .Values.global.tibco.logging.fluentbit.image.name }}:{{ .Values.global.tibco.logging.fluentbit.image.tag }}
        imagePullPolicy: {{ .Values.global.tibco.logging.fluentbit.image.pullPolicy }}
        {{- if .Values.global.tibco.logging.fluentbit.securityContext }}
        securityContext:
          {{- toYaml .Values.global.tibco.logging.fluentbit.securityContext | nindent 10 }}
        {{- end }}  
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: CONTAINER_NAME
            value: hybrid-proxy
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        volumeMounts:
          - name: podlogs
            mountPath: /var/log/pods
          - name: config-volume
            mountPath: /fluent-bit/etc/
{{- end }}
      volumes:
        - name: settings-config-volume
          configMap:
            name: {{ include "hybrid-proxy.consts.appName" . }}-settings
{{- if .Values.global.tibco.logging.fluentbit.enabled }}
        - name: podlogs
          hostPath:
            path: /var/log/pods
            type: Directory
        - name: config-volume
          configMap:
            name: {{ include "hybrid-proxy.consts.appName" . }}-fluentbit-config
{{- end }}
{{- if .Values.enableWebHooks }}
        - name: cert
          secret:
            defaultMode: 420
            secretName: {{ include "hybrid-proxy.consts.webhook" . }}-tls
{{- end }}
      imagePullSecrets:
        - name: {{ include "hybrid-proxy.container-registry.secret" . }}
