#
# Copyright Â© 2023 - 2025. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#
# Default values for o11y service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  cp:
    dataplaneId: dp-dp1
    instanceId: defaultinstid
    subscriptionId: sub-id1
    namespace: tp-dp-dp1
    containerRegistry:
      secret: ""
      url: ""
      repository: "tibco-platform-docker-prod"
    enableClusterScopedPerm: true
    enableResourceConstraints: true
    environmentType: ""
    appNamespaces:
      - app-ns1
      - app-ns2
    dataplane:
      hostCloudType: ""
      ingress:
        enabled: false
        className: nginx
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /$2
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        tls: []
        hosts:
          - host: ""
            paths:
              - path: /traces
                enabled: true
                pathType: Prefix
                backend:
                  service:
                    name: otel-userapp-traces
                    port:
                      number: 4318
          - host: ""
            paths:
              - path: /metrics
                enabled: true
                pathType: Prefix
                backend:
                  service:
                    name: otel-userapp-metrics
                    port:
                      number: 4318
          - host: ""
            paths:
              - path: /logs
                enabled: true
                pathType: Prefix
                backend:
                  service:
                    name: otel-userapp-logs
                    port:
                      number: 4318
          - host: ""
            paths:
              - path: /exporter/metrics
                enabled: true
                pathType: Prefix
                backend:
                  service:
                    name: otel-userapp-metrics
                    port:
                      number: 4319
    resources:
      serviceaccount:
        namespace: ""
        serviceAccountName: ""
      resourcemapping:
        O11Y: o11yv3
      o11yv3:
        logsServer:
          config:
            exporter:
              userApps:
                enabled: true
                kind: elasticSearch
                elasticSearch:
                  logIndex: somevalue
                  endpoint: somevalue
                  username: somevalue
                openSearch:
                  logIndex: somevalue
                  endpoint: somevalue
                  username: somevalue
                kafka:
                  brokers: {}
                  protocol_version: somevalue
                  topic: somevalue
                  username: somevalue
                otlp:
                  type: http|grpc
                  endpoint: localhost:4317
              services:
                enabled: true
                kind: elasticSearch
                elasticSearch:
                  logIndex: somevalue
                  endpoint: somevalue
                  username: somevalue
                openSearch:
                  logIndex: somevalue
                  endpoint: somevalue
                  username: somevalue
                kafka:
                  brokers: {}
                  protocol_version: somevalue
                  topic: somevalue
                  username: somevalue
                otlp:
                  type: http|grpc
                  endpoint: localhost:4317
              auditSafe:
                enabled: false
                kind: elasticSearch
                elasticSearch:
                  logIndex: ""
                  endpoint: ""
                  username: ""
            exporterSecondary:
              userApps:
                enabled: false
                kind: otlp
                otlp:
                  type: http|grpc
                  endpoint: localhost:4317
              services:
                enabled: false
                kind: otlp
                otlp:
                  type: http|grpc
                  endpoint: localhost:4317
            proxy:
              userApps:
                kind: elasticSearch
                enabled: true
                elasticSearch:
                  logIndex: somevalue
                  endpoint: somevalue
                  username: somevalue
                openSearch:
                  logIndex: somevalue
                  endpoint: somevalue
                  username: somevalue
              auditSafe:
                kind: elasticSearch
                enabled: true
                elasticSearch:
                  logIndex: somevalue
                  endpoint: somevalue
                  username: somevalue
          secret:
            exporter:
              userApps:
                elasticSearch:
                  password: somevalue
                  headers: {}
                openSearch:
                  password: somevalue
                  headers: {}
                kafka:
                  password: somevalue
              services:
                elasticSearch:
                  password: somevalue
                  headers: {}
                openSearch:
                  password: somevalue
                  headers: {}
                kafka:
                  password: somevalue
              auditSafe:
                elasticSearch:
                  password: somevalue
                  headers: {}
            proxy:
              userApps:
                elasticSearch:
                  headers: {}
                  password: somevalue
                openSearch:
                  headers: {}
                  password: somevalue
              auditSafe:
                elasticSearch:
                  headers: {}
                  password: somevalue
        metricsServer:
          config:
            exporter:
              enabled: true
              kind: prometheus
              prometheus:
                endpoint: somevalue
                username: somevalue
              kafka:
                brokers: somevalue
                protocol_version: somevalue
                topic: somevalue
                username: somevalue
              otlp:
                type: http|grpc
                endpoint: localhost:4317
            exporterSecondary:
              enabled: false
              kind: otlp
              otlp:
                type: http|grpc
                endpoint: localhost:4317
            proxy:
              enabled: true
              kind: prometheus
              prometheus:
                endpoint: system
                username: somevalue
          secret:
            exporter:
              prometheus:
                headers: {}
                password: somevalue
              kafka:
                password: somevalue
            proxy:
              prometheus:
                headers: {}
                password: somevalue
        tracesServer:
          config:
            exporter:
              enabled: true
              kind: elasticSearch
              elasticSearch:
                endpoint: somevalue
                username: somevalue
              openSearch:
                endpoint: somevalue
                username: somevalue
              localStore:
                storageClassName: somevalue
              kafka:
                brokers: {}
                protocol_version: somevalue
                topic: somevalue
                username: somevalue
              otlp:
                type: http|grpc
                endpoint: localhost:4317
            exporterSecondary:
              enabled: false
              kind: otlp
              otlp:
                type: http|grpc
                endpoint: localhost:4317
            proxy:
              enabled: true
              kind: elasticSearch
              elasticSearch:
                endpoint: somevalue
                username: somevalue
              openSearch:
                endpoint: somevalue
                username: somevalue
              localStore:
                storageClassName: somevalue
          secret:
            exporter:
              elasticSearch:
                headers: {}
                password: somevalue
              openSearch:
                headers: {}
                password: somevalue
              kafka:
                password: somevalue
            proxy:
              enabled: true
              kind: elasticSearch
              elasticSearch:
                headers: {}
                password: somevalue
              openSearch:
                headers: {}
                password: somevalue
      o11y:
        logsServer:
          kind: "elasticSearch"
          config:
            exporter:
              services:
                enabled: true
                logindex:
                  endpoint: "logsServer-config-exporter-services-logindex-endpoint"
                  username: "logsServer-config-exporter-services-logindex-username"
              userapp:
                enabled: true
                logindex:
                  endpoint: "logsServer-config-exporter-userapp-logindex-endpoint"
                  username: "logsServer-config-exporter-userapp-logindex-username"
            proxy:
              userapp:
                logindex:
                  endpoint: "logsServer-config-proxy-userapp-logindex-endpoint"
                  username: "logsServer-config-proxy-userapp-logindex-endpoint"
            services:
              logindex: "logsServer-config-services-logindex"
            userapp:
              logindex: "logsServer-config-userapp-logindex"
          secret:
            exporter:
              services:
                headers: {}
                logindex:
                  password: "logsServer-secret-exporter-services-logindex-password"
              userapp:
                headers: {}
                logindex:
                  password: "logsServer-secret-exporter-userapp-logindex-password"
            proxy:
              userapp:
                headers: {}
                logindex:
                  password: "logsServer-secret-proxy-userapp-logindex-password"
        tracesServer:
          kind: "jaeger"
          enabled: true
          config:
            collector:
              host: "dummy"
              port: 4317
            es:
              endpoint: "tracesServer-config-es-endpoint"
              port: 9200
              username: "tracesServer-config-es-username"
          secret:
            es:
              headers: {}
              password: "tracesServer-secret-es-password"
        metricsServer:
          kind: "prometheus"
          enabled: true
          config:
            exporter:
              endpoint: "metricsServer-config-exporter-endpoint"
            proxy:
              endpoint: "metricsServer-config-proxy-endpoint"
              username: "metricsServer-config-proxy-username"
          secret:
            exporter:
              token: "metricsServer-secret-exporter-token"
            proxy:
              token: "metricsServer-secret-proxy-token"
              headers: {}
              password: "metricsServer-secret-proxy-password"
        config:
          otel:
            receiver:
              service:
                name: "otel-userapp"
                port: 4317
              logs:
                name: "otel-userapp-logs"
              metrics:
                name: "otel-userapp-metrics"
              traces:
                name: "otel-userapp-traces"
          finops:
            collector:
              endpoint: "finops-collector-endpoint"
          logserver:
            userapp:
              logindex: "tibco-user-app"
              traceindex: "dummy"
            services:
              logindex: "tibco-services"
            proxy:
              userapp:
                logindex:
                  endpoint: ""
                  username: "elastic"
            exporter:
              userapp:
                logindex:
                  endpoint: ""
                  username: "elastic"
              services:
                logindex:
                  endpoint: ""
                  username: "elastic"
          promserver:
            proxy:
              endpoint: "dummy"
              username: "dummy"
            exporter:
              endpoint: "dummy"
          jaeger:
            collector:
              host: "dummy"
              port: 4317
            es:
              host: ""
              port: 9200
              username: "elastic"
        secret:
          logserver:
            userapp:
              proxy:
                password: "pwd-userapp-proxy"
              exporter:
                password: "pwd-userapp-exporter"
            services:
              exporter:
                password: "pwd-svc-exporter"
          promserver:
            proxy:
              password: "pwd-promserver-proxy"
            exporter:
              token: "token-promserver-exporter"
          jaeger:
            es:
              password: "pwd-jaeger-es"
      ingress:
        fqdn: ""
        ingressClassName: "my-nginx-ingress"
        ingressController: "nginx"

    logging:
      # The fluentbit configuration section.
      # It specifies that the fluentbit should not run as a non-root user and the user ID should be 0 (root).
      # Privilege escalation is not allowed for security reasons.
      # Additionally, it drops all capabilities, which is a common security practice to minimize potential risks.
      # GitHub issue: https://github.com/fluent/fluent-bit/issues/872#issuecomment-827763207, https://github.com/kyma-project/kyma/pull/11657/files
      fluentbit:
        enabled: true
        image:
          name: "common-fluentbit"
          tag: 4.0.8
        resources:
          requests:
            cpu: 10m
            memory: 15Mi
          limits:
            cpu: 50m
            memory: 30Mi

  otel:
    finops:
      exporters:
        metricsendpoint: "http://cp-proxy/finops/finops-service/api/v1/proxy"
  o11yservice:
    serviceAccount: ""
    data:
      namespace: dp-integration-default
    image:
      registry: 664529841144.dkr.ecr.us-west-2.amazonaws.com
      tag: 3144


replicaCount: 1

imagePullSecrets: []

serviceAccount:
  enabled: false
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

# Pod Security Context configuration
# This configuration ensures that the pod is run with non-root privileges for enhanced security.
# The user, group, and filesystem group IDs are all set to 1000.
# The filesystem group change policy is set to "Always", meaning the filesystem group is always set to the fsGroup.
# The seccomp (secure computing mode) profile is set to RuntimeDefault, which means it uses the default profile provided by the runtime.
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  fsGroupChangePolicy: "Always"
  seccompProfile:
    type: RuntimeDefault

securityContext:
  # It specifies that privilege escalation is not allowed for security reasons.
  # Additionally, it drops all capabilities, which is a common security practice to minimize potential risks.
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL


service:
  type: ClusterIP
  port: 7820
  targetPort: 7820

  # resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 1024Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

probes:
  liveness:
    initialDelaySeconds: 15
    failureThreshold: 3
    periodSeconds: 10
    timeoutSeconds: 5
  readiness:
    initialDelaySeconds: 5
    failureThreshold: 3
    periodSeconds: 3
    timeoutSeconds: 3
  startup:
    initialDelaySeconds: 20
    failureThreshold: 30
    periodSeconds: 5
    timeoutSeconds: 5

# -- Additional environment variables.
extraEnvVars: []
#  - name: NAME
#    value: value

# The name of ConfigMap containing additional environment variables.
extraEnvVarsCM: ""

# The name of Secret containing extra additional environment variables.
extraEnvVarsSecret: ""

# -- Extra volumeMounts for the integration services container.
# More info: `kubectl explain deployment.spec.template.spec.containers.volumeMounts`.
extraVolumeMounts: []
  # - name: example
  #   mountPath: /opt/tibco/example.txt
#   subPath: example.txt

# -- Extra volumes for the integration services container.
# More info: `kubectl explain deployment.spec.template.spec.volumes`.
extraVolumes: []
  # - name: example
  #   persistentVolumeClaim:
#     claimName: exampleClaim

# -- Additional init containers to add to the automationservices pod.
extraInitContainers: []
  # - name: dummy-init
  #   image: busybox
#   command: ['echo', "hey"]

image:
  pullPolicy: IfNotPresent

ingress:
  # -- Enables configuration of ingress to expose o11y-service. Requires ingress support in the Kubernetes cluster.
  enabled: true
  hostsOverride: false
  className: haproxy
  hosts:
    - host: ""
      paths:
        - path: /
          pathType: Prefix
  # -- Annotations for the ingress object. See documentation for your ingress controller for valid annotations.
  annotations:
    ingress.kubernetes.io/path-rewrite: "/tibco/agent/o11y/{{ $.Values.global.cp.instanceId }}/o11y-service/(.*) /\\1"
    haproxy.org/cors-enable: "true"
    haproxy.org/load-balance: leastconn
    haproxy.org/src-ip-header: X-Real-IP

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

jaeger:
  service:
    name: jaeger-query
    port: 80
  ingress:
    # -- Enables configuration of ingress to expose o11y-service. Requires ingress support in the Kubernetes cluster.
    enabled: true
    hostsOverride: false
    className: haproxy
    hosts:
      - host: ""
        paths:
          - path: /
            pathType: Prefix
    # -- Annotations for the ingress object. See documentation for your ingress controller for valid annotations.
    annotations:
      ingress.kubernetes.io/path-rewrite: "/tibco/agent/o11y/{{ $.Values.global.cp.instanceId }}/jaeger-query/(.*) /\\1"
      haproxy.org/cors-enable: "true"
      haproxy.org/load-balance: leastconn
      haproxy.org/src-ip-header: X-Real-IP

    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
