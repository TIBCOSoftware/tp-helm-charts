#
# Copyright Â© 2023 - 2025. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#
{{- if and (.Values.global.cp.resources.resourcemapping) (eq .Values.global.cp.resources.resourcemapping.O11Y "o11yv3") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "o11y-service.fullname" . }}-secret-cleanup
  labels:
    {{- include "o11y-service.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 3
  template:
    metadata:
      name: {{ include "o11y-service.fullname" . }}-secret-cleanup
      labels:
        {{- include "o11y-service.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      imagePullSecrets:
      - name: {{ .Values.global.cp.containerRegistry.secret }}
      serviceAccountName: {{ .Values.global.cp.resources.serviceaccount.serviceAccountName }}
      containers:
      - name: secret-cleanup
        image: {{ include "o11y-service.image.registry" .}}{{"/"}}{{ include "o11y-service.image.repository" .}}{{"/"}}o11y-auditsafe-scripts:{{.Values.global.o11yservice.job.image.tag }}
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          SECRET_NAME="{{ include "o11y-service.fullname" . }}"
          NAMESPACE="{{ .Release.Namespace }}"
          
          {{- $hasHeaders := false }}
          {{- if .Values.global.cp.resources.o11yv3.metricsServer.secret.proxy.prometheus.headers }}
            {{- if gt (len .Values.global.cp.resources.o11yv3.metricsServer.secret.proxy.prometheus.headers) 0 }}
              {{- $hasHeaders = true }}
            {{- end }}
          {{- end }}
          {{- if .Values.global.cp.resources.o11yv3.metricsServer.secret.exporter.prometheus.headers }}
            {{- if gt (len .Values.global.cp.resources.o11yv3.metricsServer.secret.exporter.prometheus.headers) 0 }}
              {{- $hasHeaders = true }}
            {{- end }}
          {{- end }}
          {{- if .Values.global.cp.resources.o11yv3.logsServer.secret.exporter.userApps.elasticSearch.headers }}
            {{- if gt (len .Values.global.cp.resources.o11yv3.logsServer.secret.exporter.userApps.elasticSearch.headers) 0 }}
              {{- $hasHeaders = true }}
            {{- end }}
          {{- end }}
          {{- if .Values.global.cp.resources.o11yv3.logsServer.secret.exporter.services.elasticSearch.headers }}
            {{- if gt (len .Values.global.cp.resources.o11yv3.logsServer.secret.exporter.services.elasticSearch.headers) 0 }}
              {{- $hasHeaders = true }}
            {{- end }}
          {{- end }}
          {{- if .Values.global.cp.resources.o11yv3.tracesServer.secret.exporter.elasticSearch.headers }}
            {{- if gt (len .Values.global.cp.resources.o11yv3.tracesServer.secret.exporter.elasticSearch.headers) 0 }}
              {{- $hasHeaders = true }}
            {{- end }}
          {{- end }}
          {{- if not $hasHeaders }}
          echo "No headers defined in values. Skipping cleanup."
          exit 0
          {{- end }}
          
          echo "Checking if secret $SECRET_NAME exists in namespace $NAMESPACE..."
          
          if ! kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" &>/dev/null; then
            echo "Secret does not exist. Nothing to clean up."
            exit 0
          fi
          
          echo "Secret exists. Proceeding with cleanup..."
          
          CURRENT_KEYS=$(kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" -o jsonpath='{.data}' | grep -o '"[^"]*":' | tr -d '":' || echo "")
          
          if [ -z "$CURRENT_KEYS" ]; then
            echo "No keys found in secret."
            exit 0
          fi
          
          HEADER_PATTERNS=(
            "headers-metrics-proxy-"
            "headers_metrics_exporter_"
            "headers-logs-proxy-userapp-"
            "headers-logs-proxy-auditsafe-"
            "headers_logs_expo_userapp_"
            "headers_logs_expo_services_"
            "headers_logs_expo_auditsafe_"
            "headers-traces-es-"
            "headers_traces_exporter_es_"
            "headers_traces_exporter_os_"
          )
          
          KEYS_REMOVED=0
          
          for KEY in $CURRENT_KEYS; do
            SHOULD_REMOVE=false
            for PATTERN in "${HEADER_PATTERNS[@]}"; do
              if [[ "$KEY" == $PATTERN* ]]; then
                SHOULD_REMOVE=true
                break
              fi
            done
            
            if [ "$SHOULD_REMOVE" = true ]; then
              echo "Removing key: $KEY"
              kubectl patch secret "$SECRET_NAME" -n "$NAMESPACE" --type=json -p "[{\"op\": \"remove\", \"path\": \"/data/$KEY\"}]" 2>/dev/null && KEYS_REMOVED=$((KEYS_REMOVED + 1)) || echo "  Warning: Failed to remove $KEY (may not exist)"
            fi
          done
          
          if [ $KEYS_REMOVED -eq 0 ]; then
            echo "No header keys found to clean up."
          else
            echo "Successfully removed $KEYS_REMOVED header keys."
          fi
          
          echo "Secret cleanup completed."
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
{{- end }}
