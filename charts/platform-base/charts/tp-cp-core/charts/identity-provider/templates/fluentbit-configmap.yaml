#
# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

{{- if (include "cp-core-configuration.enableLogging" .) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tp-cp-identity-provider.consts.appName" . }}-fluentbit-config
  namespace: {{ include "tp-cp-identity-provider.consts.namespace" . }}
  labels:
    {{- include "tp-cp-identity-provider.shared.labels.standard" . | nindent 4 }}
data:
  fluent-bit.conf: |
    [SERVICE]
      Flush             1
      Log_Level         info
      Daemon            off
      Parsers_File      parsers.conf
      HTTP_Server       On
      HTTP_Listen       0.0.0.0
      HTTP_Port         2020

    @INCLUDE input.conf
    @INCLUDE filter.conf
    @INCLUDE output.conf

  input.conf: |
    [INPUT]
      Name              tail
      Tag               cp.${POD_NAMESPACE}.${POD_NAME}.${POD_ID}.${CONTAINER_NAME}
      Path              /var/log/pods/{{ include "tp-cp-identity-provider.consts.appName" . }}.log
      multiline.parser  docker, cri
      DB                /var/log/db/flb_kube.db
      Mem_Buf_Limit     5MB
      Skip_Long_Lines   On
      Refresh_Interval  10

  filter.conf: |
    [FILTER]
      Name              record_modifier
      Match             cp.*
      Remove_key        stream
      Remove_key        _p
      Remove_key        date
    [FILTER]
      Name              parser
      Match             cp.*
      key_name          log
      parser            x-log-level
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              parser
      Match             cp.*
      key_name          log
      parser            x-app-id
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              parser
      Match             cp.*
      key_name          log
      parser            x-user-id
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              parser
      Match             cp.*
      key_name          log
      parser            tsc-go-logger
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              modify
      Match             cp.*
      Rename            log tscparseroriginal
    [FILTER]
      Name              nest
      Match             cp.*
      Operation         nest
      Wildcard          tscparser*
      Nest_under        log
      Remove_prefix     tscparser

  output.conf: |
    [OUTPUT]
      Name stdout
      Match  cp.*
      Format json

    [OUTPUT]
      Name                 opentelemetry
      Match                cp.*
      Host                 {{ include "cp-core-bootstrap.otel.services" . }}.${POD_NAMESPACE}.svc.cluster.local
      Port                 4318
      Logs_uri             /v1/logs
      Log_response_payload True
      Tls                  Off
      Tls.verify           Off

  parsers.conf: |
    [PARSER]
      Name              x-log-level
      Format            regex
      Regex             ^*\[*x-log-level=(?:[\\" ]*)(?<tscparserxLogLevel>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name              x-app-id
      Format            regex
      Regex             ^*\[*x-app-id=(?:[\\" ]*)(?<tscparserxAppId>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name              x-user-id
      Format            regex
      Regex             ^*\[*x-user-id=(?:[\\" ]*)(?<tscparserxUserId>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name              webserver-x-user-id
      Format            regex
      Regex             ^*\[*x-user-id:(?:[\\" ]*)(?<tscparserxUserId>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name              tsc-go-logger
      Format            regex
      Regex             ^*\] (?<time>[\d]*-[\d]*-[\d]*T[\d]*:[\d]*:[\d]*.[\d]*Z) (?<tscparserlogger>[^ ]*) - (?<tscparsermessage>.*)$
      Skip_Empty_Values False
    [PARSER]
      Name              tsc-java-logger
      Format            regex
      Regex             ^*\] (?<time>[\d]*-[\d]*-[\d]*T[\d]*:[\d]*:[\d]*.[\d]*Z) (?<tscparserlogger>[^ ]*) (?<tscparsermessage>.*)$
      Skip_Empty_Values False
    [PARSER]
      Name              tsc-node-logger
      Format            regex
      Regex             ^*(?<time>[\d]*-[\d]*-[\d]*T[\d]*:[\d]*:[\d]*.[\d]*Z) \[.*\] (?<tscparserlogger>[^ ]*) (?<tscparsermessage>.*)$
      Skip_Empty_Values False
    [PARSER]
      Name              tag_parser
      Format            regex
      Regex             (?<namespace_name>[^\.]+)\.(?<pod_name>[^\.]+)\.(?<pod_id>[^\.]+)\.(?<container_name>[^\.]+)
  update_record.lua: |
    -- Function to append all fields under key "msg"
    function update_record(tag, timestamp, record)
      local newLog = record["log"]
      local newMsg = newLog["msg"]
      if(newLog ~= nil and type(newLog) == "table") then
        for key, val in pairs(newLog) do
          if(key ~= "level" and key ~= "caller" and key ~= "msg" and key ~= "stacktrace" and key ~= "error" and key ~= "errorVerbose") then
            if(key ~= "time") then
              newMsg = newMsg .. ", " .. key .. ": " .. tostring(val)
            end
            newLog[key] = nil
          end
        end
        newLog["msg"] = newMsg
        record["log"] = newLog
      end
      return 2, timestamp, record
    end
{{- end }}