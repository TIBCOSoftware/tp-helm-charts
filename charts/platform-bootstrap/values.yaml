#
# Copyright Â© 2023 - 2025. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

compute-services:
  enabled: true
  dpMetadata:
    dpCoreInfrastructureChartVersion: "1.9.3"
    dpCoreInfrastructureAppVersion: "1.9.0"
    dpConfigureNamespaceChartVersion: "1.9.1"
    dpConfigureNamespaceAppVersion: "1.9.0"
  # Resource values for production-like setup
  # requests: Minimum amount of resources required for the application to run.
  # limits: Maximum amount of resources the application can use.
  resources:
    requests:
      cpu: 200m  # Minimum CPU required
      memory: 256Mi  # Minimum memory required
    limits:
      cpu: 500m  # Maximum CPU allowed
      memory: 1024Mi  # Maximum memory allowed


hybrid-proxy:
  # switch to false to disable hybrid-proxy
  enabled: true
  # HPO replica count
  replicaCount: "1"
  # Resource values for production-like setup
  # requests: Minimum amount of resources required for the application to run.
  # limits: Maximum amount of resources the application can use.
  resources:
    requests:
      cpu: 200m  # Minimum CPU required
      memory: 256Mi  # Minimum memory required
    limits:
      cpu: 500m  # Maximum CPU allowed
      memory: 1024Mi  # Maximum memory allowed

router-operator:
  # switch to false to disable router-operator
  enabled: true
  # SecretNames for environment variables TSC_SESSION_KEY and DOMAIN_SESSION_KEY.
  # These secrets are used to store session keys securely.
  # The secrets should be created in the same namespace as the platform-bootstrap.
  # Both keys can be configured in the same secret or different secrets.
  tscSessionKey:
    secretName: session-keys  # default secret name
    key: TSC_SESSION_KEY
  domainSessionKey:
    secretName: session-keys  # default secret name
    key: DOMAIN_SESSION_KEY
  # Resource values for production-like setup
  # requests: Minimum amount of resources required for the application to run.
  # limits: Maximum amount of resources the application can use.
  resources:
    requests:
      cpu: 200m  # Minimum CPU required
      memory: 256Mi  # Minimum memory required
    limits:
      cpu: 500m  # Maximum CPU allowed
      memory: 1024Mi  # Maximum memory allowed

resource-set-operator:
  # switch to false to disable resource-set-operator
  enabled: true
  # Resource values for production-like setup
  # requests: Minimum amount of resources required for the application to run.
  # limits: Maximum amount of resources the application can use.
  resources:
    requests:
      cpu: 200m  # Minimum CPU required
      memory: 256Mi  # Minimum memory required
    limits:
      cpu: 500m  # Maximum CPU allowed
      memory: 1024Mi  # Maximum memory allowed

otel-collector:
  # switch to true to enable otel-collector
  enabled: false
  # Resource values for production-like setup
  # requests: Minimum amount of resources required for the application to run.
  # limits: Maximum amount of resources the application can use.
  resources:
    requests:
      cpu: 200m  # Minimum CPU required
      memory: 256Mi  # Minimum memory required
    limits:
      cpu: 500m  # Maximum CPU allowed
      memory: 1024Mi  # Maximum memory allowed

# global values used by the chart. These values gets propagated to all sub-charts.
global:
  tibco:
    # The fluentbit configuration section.
    logging:
      fluentbit:
        # switch to false to disable fluentbit sidecar
        enabled: true
        # Resource values for production-like setup
        # requests: Minimum amount of resources required for the application to run.
        # limits: Maximum amount of resources the application can use.
        resources:
          requests:
            cpu: 50m  # Minimum CPU required
            memory: 100Mi  # Minimum memory required
          limits:
            cpu: 100m  # Maximum CPU allowed
            memory: 150Mi  # Maximum memory allowed
    # Honor the service account if set, otherwise chart will create a new service account "control-plane-sa"
    serviceAccount: ""
    # k8s rbac required by the service account
    rbac:
      # create the rbac for bootstrap resources.
      # set to true to create rbac resources for the service account (cluster role and binding), set to false if the service account already have the rbacs
      infra: true
    containerRegistry:
      url: ""
      username: ""
      password: ""
      repository: "tibco-platform-docker-prod"  # repository
      certificateSecret: ""  # secret name containing the custom certificates

    # Flag to enable or disable creating default network policies for a namespace
    # Default value is false. Possible values are true, false
    createNetworkPolicy: false
    networkPolicy:
      # Create deprecated network policies
      createDeprecatedPolicies: true
      # Enable or disable the creation of cluster-wide network policies
      createClusterScopePolicies: true
      # Enable or disable the creation of internet-facing network policies
      createInternetScopePolicies: true
      # Network policies for access to the database, if no values are provided, the database policy will not be created
      database:
        CIDR: ""
        port: ""
      # Network policies for access to the log server, if no values are provided, the log server policy will not be created
      logServer:
        CIDR: ""
        port: ""
      # Network policies for access to the container registry, if no values are provided, the container registry policy will not be created
      containerRegistry:
        CIDR: ""
        port: ""
      # Network policies for access to the email server, if no values are provided, the email server policy will not be created
      emailServer:
        CIDR: ""
        port: ""
      # Network policies for access to the NLB, if no values are provided, the hybrid connectivity policy will not be created
      hybridConnectivity:
      # - ports:
      #   - port: 443
      #     protocol: TCP
      #   from:
      #     - ipBlock:
      #         cidr: 0.0.0.0/0
      # Network policies for access to the proxy, if no values are provided, the proxy policy will not be created
      proxy:
        CIDR: ""
        port: ""
      # Network policies for access to the Kubernetes API server, if no values are provided, the Kubernetes API server policy will not be created
      kubeApiServer:
        CIDR: ""
        port: ""
      # Network policies for access kube-dns, if no values are provided, the kube-dns policy will be created for a vanilla k8s cluster
      kubeDns:
        egress:
        - to:
          - namespaceSelector: {}
            podSelector:
              matchLabels:
                k8s-app: kube-dns
          ports:
          - protocol: UDP
            port: 53
          - protocol: TCP
            port: 53
    # control plane instance Id. Ex: prod, stag, p01, s01. This is to identify multiple cp installation in same cluster.
    # lowercase alphanumeric string of max 5 chars
    controlPlaneInstanceId: ""

    useSingleNamespace: true

    enableResourceConstraints: true

    proxy:
      httpProxy: ""
      httpsProxy: ""
      noProxy: ""

  external:
    dnsTunnelDomain: ""
    dnsDomain: ""
    clusterInfo:
      nodeCIDR: ""
      podCIDR: ""
      serviceCIDR: "172.20.0.0/16"

#    logserver:
#      endpoint: ""
#      username: ""
#      index: ""
#      password: ""

    storage:
      resources:
        requests:
          storage: 2Gi
      # 1. to create/use volumeName, uncomment storageClassName and set matching value as volume
      # 2. to use default storageClass, keep storageClassName key commented
      # 3. to use pre-configured storageClass, uncomment storageClassName and pass the value
      # 4. to use existing PVC, uncomment pvcName and set the name of the PVC, keep volumeName & storageClassName commented
      # 5. to create/use volumeName with custom name, uncomment pvcName and set the desired name, uncomment storageClassName and set matching value as volume
      # pvcName: "abc"
      # volumeName: "123"
      # storageClassName: "gp2"
