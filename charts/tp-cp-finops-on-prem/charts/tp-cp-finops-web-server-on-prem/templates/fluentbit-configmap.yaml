{{- if .Values.global.enableLogging }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tp-cp-finops-web-server.consts.appName" . }}-fluentbit-config
  namespace: {{ include "tp-cp-finops-web-server.consts.namespace" . }}
  labels:
    {{- include "tp-cp-finops-web-server.shared.labels.standard" . | nindent 4 }}
data:
  fluent-bit.conf: |
    [SERVICE]
      Flush             1
      Log_Level         info
      Daemon            off
      Parsers_File      parsers.conf

    @INCLUDE input.conf
    @INCLUDE filter.conf
    @INCLUDE output.conf

  input.conf: |
    [INPUT]
      Name              tail
      Tag               cic20.${POD_NAMESPACE}.${POD_NAME}.${POD_ID}.${CONTAINER_NAME}
      Path              /var/log/pods/${POD_NAMESPACE}_${POD_NAME}_${POD_ID}/${CONTAINER_NAME}/*.log
      multiline.parser  docker, cri
      DB                /var/log/flb_kube.db
      Mem_Buf_Limit     5MB
      Skip_Long_Lines   On
      Refresh_Interval  10

  filter.conf: |
    [FILTER]
      Name              record_modifier
      Match             cic20.*
      Record            pod.namespace ${POD_NAMESPACE}
      Record            pod.name ${POD_NAME}
      Record            pod.id ${POD_ID}
      Record            container.name ${CONTAINER_NAME}
      Record            host.ip ${HOST_IP}
      Record            account {{ .Values.global.cic.data.SYSTEM_AWS_ACCOUNT_ID | default "NA" }}
      Record            installation.name {{ .Values.global.cic.data.SYSTEM_INSTALLATION_NAME }}
      Record            cluster.name {{ .Values.global.cic.data.SYSTEM_CLUSTER_NAME }}
      Record            cluster.id {{ .Values.global.cic.data.SYSTEM_CLUSTER_ID }}
      Record            cluster.region ${REGION}
      Remove_key        stream
      Remove_key        date
      Remove_key        _p
    [FILTER]
      Name              parser
      Match             cic20.*
      key_name          log
      parser            x-log-level
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              parser
      Match             cic20.*
      key_name          log
      parser            x-app-id
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              parser
      Match             cic20.*
      key_name          log
      parser            webserver-x-user-id
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              parser
      Match             cic20.*
      key_name          log
      parser            tsc-node-logger
      Reserve_Data      On
      Preserve_Key      On
    [FILTER]
      Name              modify
      Match             cic20.*
      Rename            log tscparseroriginal
    [FILTER]
      Name              nest
      Match             cic20.*
      Operation         nest
      Wildcard          tscparser*
      Nest_under        log
      Remove_prefix     tscparser

  output.conf: |
    [OUTPUT]
      Name                 opentelemetry
      Match                *
      Host                 {{ .Values.global.cic.data.SYSTEM_OTEL_COLLECTOR }}
      Port                 {{ .Values.global.cic.data.SYSTEM_OTEL_COLLECTOR_PORT }}
      Metrics_uri          /v1/metrics
      Logs_uri             /v1/logs
      Traces_uri           /v1/traces
      Log_response_payload True
      Tls                  Off
      Tls.verify           Off

  parsers.conf: |
    [PARSER]
      Name   x-log-level
      Format regex
      Regex ^*\[*x-log-level=(?:[\\" ]*)(?<tscparserxLogLevel>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name x-app-id
      Format regex
      Regex ^*\[*x-app-id=(?:[\\" ]*)(?<tscparserxAppId>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name x-user-id
      Format regex
      Regex ^*\[*x-user-id=(?:[\\" ]*)(?<tscparserxUserId>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name webserver-x-user-id
      Format regex
      Regex ^*\[*x-user-id:(?:[\\" ]*)(?<tscparserxUserId>[^ "\\\]]*).*$
      Skip_Empty_Values False
    [PARSER]
      Name tsc-go-logger
      Format regex
      Regex ^*\] (?<time>[\d]*-[\d]*-[\d]*T[\d]*:[\d]*:[\d]*.[\d]*Z) (?<tscparserlogger>[^ ]*) - (?<tscparsermessage>.*)$
      Skip_Empty_Values False
    [PARSER]
      Name tsc-java-logger
      Format regex
      Regex ^*\] (?<time>[\d]*-[\d]*-[\d]*T[\d]*:[\d]*:[\d]*.[\d]*Z) (?<tscparserlogger>[^ ]*) (?<tscparsermessage>.*)$
      Skip_Empty_Values False
    [PARSER]
      Name tsc-node-logger
      Format regex
      Regex ^*(?<time>[\d]*-[\d]*-[\d]*T[\d]*:[\d]*:[\d]*.[\d]*Z) \[.*\] (?<tscparserlogger>[^ ]*) (?<tscparsermessage>.*)$
      Skip_Empty_Values False
    [PARSER]
      Name              tag_parser
      Format            regex
      Regex             (?<namespace_name>[^\.]+)\.(?<pod_name>[^\.]+)\.(?<pod_id>[^\.]+)\.(?<container_name>[^\.]+)
{{- end }}
