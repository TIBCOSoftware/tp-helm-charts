# Copyright Â© 2025. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.

# Name of chart
name: dp-config-aws
# label indicating which project this pipeline belongs to (Don't change)
partOf: TIBCO-Platform
# indicating which tools are used to generate this template (Don't change)
createdBy: generator

dns:
  domain: ""  # abc.<host-domain>
  vanity: "*"

# this ingress object is used for AWS Load Balancer Controller to create ALB
httpIngress:
  enabled: false
  name: nginx   # traefik for traefik, kong for kong
  ingressClassName: alb  # this is for AWS ingress controller
  path: /
  backend:
    serviceName: dp-config-aws-ingress-nginx-controller  # serviceName dp-config-aws-traefik for traefik, dp-config-aws-kong-proxy for kong
    servicePort: 80    # port 443 for traefik , 80 for kong
  # more AWS annotations: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.6/guide/ingress/annotations/
  annotations:
    alb.ingress.kubernetes.io/group.name: ""  # abc.<host-domain>
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/backend-protocol: HTTP  # HTTPS for traefik
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/success-codes: 200-499
    alb.ingress.kubernetes.io/target-type: ip
    external-dns.alpha.kubernetes.io/hostname: ""  # *.abc.<host-domain>

# this service object is used for NLB user case. Ideally, we will use annotation to create NLB
service:
  # list of annotations: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.5/guide/service/annotations/
  enabled: false
  name: dp-config-aws-service
  type: LoadBalancer
  annotations: {}
  labels: {}
  ports:
    ems:
      enabled: true
      containerPort: 8080
      servicePort: 443
      protocol: TCP
      # hostPort: 443
      # nodePort: 30317
      # appProtocol: tcp
  selector: {}

# storageClass can not be updated: parameters: Forbidden: updates to parameters are forbidden
storageClass:
  # see: https://docs.aws.amazon.com/eks/latest/userguide/ebs-csi.html
  ebs:
    enabled: false
    name: ebs-gp3
    default: false
    parameters:
      type: gp3
      fsType: ext4
      # iopsPerGB: 10
      encrypted: true
    reclaimPolicy: Delete
    allowVolumeExpansion: true
    volumeBindingMode: WaitForFirstConsumer
  # see: https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html
  # and: https://github.com/kubernetes-sigs/aws-efs-csi-driver/blob/master/examples/kubernetes/dynamic_provisioning/README.md
  # follow this to create EFS: GUI: https://docs.aws.amazon.com/efs/latest/ug/gs-step-two-create-efs-resources.html
  # script: https://github.com/kubernetes-sigs/aws-efs-csi-driver/blob/master/docs/efs-create-filesystem.md
  efs:
    enabled: false
    name: efs-sc
    default: false
    mountOptions:
      - soft
      - timeo=300
      - actimeo=1
    parameters:
      provisioningMode: efs-ap
      fileSystemId: ""
      directoryPerms: "700"
      # basePath: "/data"
      # subPathPattern: "${.PVC.namespace}/${.PVC.name}" # optional
      # gidRangeStart: "1000" # optional
      # gidRangeEnd: "2000" # optional
      # ensureUniqueDirectory: "true" # optional

traefik:
  # chart values: https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
  enabled: false
  hub:  # for hub
    enabled: false
  service:  # for external-dns
    type: ClusterIP
  ingressClass:
    name: traefik
  ingressRoute:  # for dashboard
    dashboard:
      matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
      entryPoints:
        - traefik
        - web
        - websecure
  providers:  # for external service
    kubernetesIngress:
      allowExternalNameServices: true
  nodeSelector:  # for cic2
    kubernetes.io/os: linux
  serversTransport:
    insecureSkipVerify: true

ingress-nginx:
  # chart values: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
  enabled: false
  controller:
    service:  # for external-dns
      type: ClusterIP
    nodeSelector:
      kubernetes.io/os: linux

kong:
  # chart values: https://github.com/Kong/charts/blob/main/charts/kong/values.yaml
  enabled: false
  ingressController:
    env:
      feature_gates: FillIDs=true,RewriteURIs=true
  proxy:
    type: ClusterIP
    tls:
      enabled: false

# reference: https://docs.crossplane.io/latest/software/install/
# this is used for deploying crossplane chart
crossplane:
  enabled: false
  args:
  - --enable-environment-configs

# reference: https://docs.crossplane.io/latest/concepts/
crossplane-components:
  # This is used to install/deploy components of crossplane
  # Currently, to create infrastructure following components are created
  # - providers
  # - configs
  # - composite resource definitions (XRDs) and compositions
  # - claims
  enabled: false

  # This is used for installing crossplane-providers
  # Currently, provider-aws and provider-kubernetes are included
  providers:
    # To install set enable to true
    enabled: false
    # Set the role name used for crossplane
    # The role should have the required capabilities to create AWS resources
    iamRoleName: ""

  # This is used for installing crossplane-provider-configs
  # Currently, provider-aws-config and provider-kubernetes-config are included
  configs:
    # To install set enable to true
    enabled: false
    # Set the role name used for crossplane
    # The role should have the required capabilities to create AWS resources
    iamRoleName: ""

  # This is used for creating crossplane composite resource definitions (XRDs) and compositions
  # Currently, following are created
  # - AWS EFS
  # - Kubernetes storage class
  # - Kubernetes persistent volume
  # - AWS RDS PostgreSQL instance
  # - AWS Redis replication group
  # - AWS SES email identity
  # - AWS IAM role, policies and role-policy attachments
  # - Kubernetes service account
  compositions:
    enabled: false

  # This is used for deploying crossplane-claims
  # Depending on the values passed, it creates EFS, RDS PostgreSQL instance, Redis replication group, IAM role & policies, SES email identity
  claims:
    # To install set enable to true
    enabled: false

    # This string provided a unique identifier to distinguish multiple resources created using crossplane claims
    # Value must be a string of MAXIMUM 10 lowercase alphanumeric characters (starting with an alphabet) which can include 1 hyphen (-), but not end with it
    # e.g. dev-1
    commonResourcePrefix: ""
    # Set the tags (key-value pairs) which are to be added to all AWS resources created from crossplane claims
    # commonTags:
    #   cluster-name: ""
    #   owner: ""
    efs:
      # To create EFS claim set create to true
      create: false
      # Secret name in the same release namespace where the efs_id and efs_arn will be stored
      connectionDetailsSecret: ""
      # A subset of parameters from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html are supported
      # Mandatory configuration parameters for EFS
      mandatoryConfigurationParameters:
        performanceMode: "generalPurpose"
        throughputMode: "elastic"
      # Additional configuration parameters for EFS
      # additionalConfigurationParameters:
      #   encrypted: "true"
      #   kmsKeyId: ""
      #   provisionedThroughputInMibps: 10
      storageClass:
        # To create kubernetes storage class set create to true
        create: false
        # Set the name of storage class
        name: ""
        # See: https://github.com/kubernetes-sigs/aws-efs-csi-driver for mount options, parameters
        mountOptions:
          - soft
          - timeo=300
          - actimeo=1
        parameters:
          provisioningMode: efs-ap
          directoryPerms: "700"
          # basePath: "/data"
          # subPathPattern: "${.PVC.namespace}/${.PVC.name}" # optional
          # gidRangeStart: "1000" # optional
          # gidRangeEnd: "2000" # optional
          # ensureUniqueDirectory: "true" # optional
        # See: https://kubernetes.io/docs/concepts/storage/storage-classes/
        allowVolumeExpansion: false
        reclaimPolicy: "Delete"
        volumeBindingMode: "Immediate"
      persistentVolume:
        # To create kubernetes persistent volume set create to true
        create: false
        # Set the name of persistent volume
        name: ""
        accessModes:
          - ReadWriteMany
        reclaimPolicy: "Retain"
        storage: "10000Gi"
        storageClassName: ""
        volumeMode: "Filesystem"
      # Set the tags (key-value pairs) which are to be added to EFS
      # resourceTags:
      #   resource-name: efs
      #   cost-center: control-plane


    postgresInstance:
      # To create RDS PostgreSQL instance claim set create to true
      create: false
      # Secret name in the same release namespace where the username, password, endpoint and port will be stored
      connectionDetailsSecret: ""
      # A subset of parameters from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbinstance.html are supported
      # Mandatory configuration parameters for RDS PostgreSQL instance
      mandatoryConfigurationParameters:
        dbInstanceClass: "db.t3.small"
        dbName: "postgres"
        engine: "postgres"
        engineVersion: "14.8"
        masterUsername: "useradmin"
        port: 5432
        publiclyAccessible: false
      # Additional configuration parameters for RDS PostgreSQL instance
      # additionalConfigurationParameters:
      #   allocatedStorage: 20
      #   backupRetentionPeriod: 0
      #   caCertificateIdentifier: "rds-ca-rsa2048-g1"
      #   deletionProtection: "false"
      #   finalDBSnapshotIdentifier: ""
      #   kmsKeyId: ""
      #   multiAZ: "false"
      #   skipFinalSnapshotBeforeDeletion: "true"
      #   storageEncrypted: "false"
      #   storageType: gp3
      #   restoreFrom:
      #     source: "Snapshot"
      #     snapshot:
      #       snapshotIdentifier: ""
      # Set the tags (key-value pairs) which are to be added to RDS DB instance
      # resourceTags:
      #   resource-name: postgres-instance
      #   cost-center: control-plane

    auroraCluster:
      # To create Auora cluster claim set create to true
      create: false
      # Secret name in the same release namespace where the username, password, endpoint and port will be stored
      connectionDetailsSecret: ""
      numberOfInstances: 1
      globalDatabase:
        primaryCluster:
          create: false
          deletionProtection: "false"
        secondaryCluster:
          create: false
          globalClusterIdentifier: ""
          enableGlobalWriteForwarding: "true"
          masterUserPasswordSecretRef:
            name: "dummy"
            key: "dummy"
            # encoded value - Not Required to be set
            username: ""
            # encoded value - Not Required to be set
            password: ""
      # A subset of parameters from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html are supported
      # Mandatory configuration parameters for Aurora cluster
      mandatoryConfigurationParameters:
        autoMinorVersionUpgrade: true
        # provide for creating primary / stand-alone cluster
        # databaseName: "postgres"
        dbInstanceClass: "db.t3.medium"
        dbParameterGroupFamily: "aurora-postgresql14"
        enablePerformanceInsights: false
        engine: "aurora-postgresql"
        engineVersion: "14.11"
        engineMode: "provisioned"
        # provide for creating primary / stand-alone cluster
        # masterUsername: "useradmin"
        port: 5432
        publiclyAccessible: false
      # Additional configuration parameters for Aurora postgres
      # additionalConfigurationParameters:
      #   allocatedStorage: 20
      #   allowMajorVersionUpgrade: "false"
      #   applyImmediately: "false"
      #   backupRetentionPeriod: "0"
      #   deletionProtection: "false"
      #   finalDBSnapshotIdentifier: ""
      #   kmsKeyId: ""
      #   groupFamilyParameters:
      #     - parameterName: rds.force_ssl
      #       parameterValue: '1'
      #       applyMethod: immediate
      #   allowedIngressConnectionsFrom:
      #     - "10.120.0.0/32"
      #     - "40.120.0.0/32"
      #   performanceInsightsKmsKeyId: ""
      #   skipFinalSnapshot: "true"
      #   storageEncrypted: "false"
      #   storageType: aurora
      #   restoreFrom:
      #     source: "Snapshot"
      #     snapshot:
      #       snapshotIdentifier: ""
      # # Set the tags (key-value pairs) which are to be added to RDS DB instance
      # resourceTags:
      #   resource-name: aurora-cluster
      #   cost-center: control-plane

    ses:
      # To create SES email identity claim set create to true
      create: false
      # Secret name in the same release namespace where the secret will be stored
      connectionDetailsSecret: ""
      # A subset of parameters from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-emailidentity.html are supported
      # Mandatory configuration parameters for SES email identity
      mandatoryConfigurationParameters:
        emailIdentity: ""
      # Set the tags (key-value pairs) which are to be added to SES email identity
      # resourceTags:
      #   resource-name: email-identity
      #   cost-center: control-plane

    redis:
      # To create Redis replication group claim set create to true
      create: false
      # Secret name in the same release namespace where the configuration_endpoint and configuration_port will be stored
      connectionDetailsSecret: ""
      # A subset of parameters from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-replicationgroup.html are supported
      # Mandatory configuration parameters for Redis replication group
      mandatoryConfigurationParameters:
        cacheNodeType: "cache.t4g.medium"
        cacheParameterGroupName: "default.redis6.x"
        engineVersion: "6.x"
        port: 6379
      # Additional configuration parameters for Redis replication group
      # additionalConfigurationParameters:
      #   applyModificationsImmediately: "true"
      #   atRestEncryptionEnabled: "false"
      #   authEnabled: "false"
      #   engine: "redis"
      #   multiAZEnabled: "false"
      #   numNodeGroups: 1
      #   replicasPerNodeGroup: "0"
      #   restoreFrom:
      #     snapshotName: ""
      #   transitEncryptionEnabled: "false"
      # Set the tags (key-value pairs) which are to be added to Redis replication group
      # resourceTags:
      #   resource-name: redis
      #   cost-center: control-plane
    iam:
      # To create IAM role claim set create to true
      create: false
      # Secret name in the same release namespace where the role_arn will be stored
      connectionDetailsSecret: ""
      # A subset of parameters from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html are supported
      # Mandatory configuration parameters for IAM role
      mandatoryConfigurationParameters:
        serviceAccount:
          # To create kubernetes service account set create to true
          create: false
          # Set the name of service account
          name: ""
          # Set the namespace in which service account to be created
          namespace: ""
        # IAM role policy attachments are created for document and ARNs mentioned below
        policy:
          # Set the document json for IAM policy
          document: {}
          # Set the IAM policy ARNs
          arns:
            - arn:aws:iam::aws:policy/AmazonSESFullAccess
      # Set the tags (key-value pairs) which are to be added to IAM role
      # resourceTags:
      #   resource-name: iam-role
      #   cost-center: control-plane
