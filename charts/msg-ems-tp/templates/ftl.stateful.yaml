#
# Copyright (c) 2023. Cloud Software Group, Inc.
# This file is subject to the license terms contained 
# in the license file that is distributed with this file.  
#

#   ${hostname}-${replicaId}.${serviceName}.${namespace}.svc.${clusterDomain}
#
apiVersion: apps/v1
#
# HELPER VARIABLE DEFINITIONS
{{-  $emsParams := include "need.msg.ems.params" . | fromYaml -}}
{{-  $emsNeedsVct := "no" -}}
{{- if ne "ftl" $emsParams.ems.stores -}}
  {{- fail "Unsupported Store type" -}}
{{- end -}}
{{- $stsname := printf "%s-ems" $emsParams.ems.name -}}
{{- $svcname := printf "%s-%s" $emsParams.ems.name "ems" -}}
{{- $svcEms := printf "%s-%s" $emsParams.ems.name "ems" -}}
{{- $svcEmsHost := printf "%s.%s.svc" $svcEms .Release.Namespace -}}
{{- $svcFtl := printf "%s-%s" $emsParams.ems.name "ftl" -}}
{{- $svcFtlHost := printf "%s.%s.svc" $svcFtl .Release.Namespace -}}
{{- $dataPvc := $emsParams.ems.logs.storageName -}}
#
kind: StatefulSet
metadata:
    name: "{{ $stsname }}"
    namespace: "{{ .Release.Namespace }}"
    labels:
      {{ include "msg.dp.labels" . | indent 6 }}
      name: "{{ $stsname }}"
      # app.kubernetes.io/name must match CAP-DB services list for health monitoring
      # currently this is a fixed list per capability template, not instance customizable
      app.kubernetes.io/name: "ems"
      app: msg-ems-ftl
      tib-dp-app: msg-ems-ftl
      tib-msg-stsname: "{{ $stsname }}"
      tib-msg-svcname: "{{ $emsParams.ems.name }}-ems"
      tib-msg-ems-name: "{{ $emsParams.ems.name }}"
      tib-msg-ems-sizing: "{{ $emsParams.ems.sizing }}"
      tib-msg-ems-use: "{{ $emsParams.ems.use }}"
      sidecar.istio.io/inject: "{{ $emsParams.ems.istioEnable }}"
    annotations:
      {{ include "msg.dp.mon.annotations" . | indent 6 }}
      # isLeader="http://localhost:9010/isReady"
      platform.tibco.com/leader-endpoint: "{{ $emsParams.ems.isLeader | default "none" }}"
      platform.tibco.com/quorum-strategy: "{{ $emsParams.ems.quorumStrategy | default "none" }}"
      # isInQuorum="http://localhost:9013/api/v1/available"
      platform.tibco.com/is-in-quorum: "{{ $emsParams.ems.isInQuorum | default "none" }}"
spec:
    podManagementPolicy: Parallel
    replicas: {{ int $emsParams.ems.replicas }}
    selector:
        matchLabels:
          tib-msg-stsname: "{{ $stsname }}"
          tib-dp-release: "{{ .Release.Name }}"
    serviceName: "{{ $svcname }}"
    template:
        metadata:
            labels:
                tib-dp-name: "{{ $emsParams.dp.name }}"
                {{ include "msg.dp.labels" . | indent 16 }}
                {{ include "msg.dp.net.all" . | indent 16}}
                tib-msg-stsname: "{{ $stsname }}"
                name: ems
                app: msg-ems-ftl
                app.kubernetes.io/name: "ems"
                tib-msg-ems-name: "{{ $emsParams.ems.name }}"
                tib-msg-ems-sizing: "{{ $emsParams.ems.sizing }}"
                tib-msg-ems-use: "{{ $emsParams.ems.use }}"
                "sidecar.istio.io/inject": "{{ $emsParams.ems.istioEnable }}"
            name: ems
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "{{ $emsParams.ems.ports.promServerEP }}"
              cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        spec:
            {{- if ne "none" $emsParams.dp.pullSecret }}
            imagePullSecrets:
            - name: {{ $emsParams.dp.pullSecret }}
            {{- end }}
            # NOTE: if hostname/subdomain do not agree with podname/service
            # .. DNS pod resolution problems can occur
            hostname: "{{ $stsname }}"
            enableServiceLinks: false
            subdomain: "{{ $svcname }}"
            nodeSelector:
              kubernetes.io/os: linux
            topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              {{- if eq "false" ( $emsParams.ems.allowNodeSkew | default "true" ) }}
              whenUnsatisfiable: DoNotSchedule
              {{- else }}
              whenUnsatisfiable: ScheduleAnyway
              {{- end }}
              labelSelector:
                matchLabels:
                  tib-msg-stsname: "{{ $stsname }}"
                  tib-dp-release: "{{ .Release.Name }}"
            {{- if eq $emsParams.dp.where "aws" }}
            - maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              {{- if eq "false" ( $emsParams.ems.allowZoneSkew | default "true" ) }}
              whenUnsatisfiable: DoNotSchedule
              {{- else }}
              whenUnsatisfiable: ScheduleAnyway
              {{- end }}
              labelSelector:
                matchLabels:
                  tib-msg-stsname: "{{ $stsname }}"
                  tib-dp-release: "{{ .Release.Name }}"
            {{- end }}
            containers:
            - name: "{{ $stsname }}"
              image: "{{ $emsParams.ems.image }}"
              imagePullPolicy: "{{ $emsParams.dp.pullPolicy }}"
              resources:
{{ $emsParams.ems.resources | toYaml | indent 16 }}
              # exec /usr/local/watchdog/bin/wait-for-shutdown.sh  ; 
              command: ['/compliance/check_eua', 'bash', '-c' ]
              args:
              - >
                ( mkdir -p /logs/$MY_POD_NAME/boot ; cd /logs/$MY_POD_NAME/boot ;
                    for x in /boot/mk-*.sh ; do bash < $x ; done | tee -a boot.out ) ;
                ( mkdir -p /logs/$MY_POD_NAME/certs/samples ; cd /logs/$MY_POD_NAME/certs/samples ; 
                    for x in server.cert.pem server_root.cert.pem server.key.pem ; do 
                      cp /opt/tibco/ems/current-version/samples/certs/$x $x ; done ) ;
                ( if [ -f $(echo /boot-certs/*.pem | cut -f1 -d' ' ) ] ; then
                    cd /logs/$MY_POD_NAME/ ; cp /boot-certs/* ./certs/ ; fi )
                exec /usr/local/watchdog/bin/watchdog  ; 
              ports:
              - name: http-port
                containerPort: {{ int $emsParams.ems.ports.httpPort }}
                protocol: TCP
              - name: tcp-port
                containerPort: {{ int $emsParams.ems.ports.tcpPort }}
                protocol: TCP
              - name: ssl-port
                containerPort: {{ int $emsParams.ems.ports.sslPort }}
                protocol: TCP
              - name: realm-port
                containerPort: {{ int $emsParams.ems.ports.realmPort }}
                protocol: TCP
              - name: admin-port
                containerPort: {{ int $emsParams.ems.ports.adminPort }}
                protocol: TCP
              - name: ep-server
                containerPort: {{ int $emsParams.ems.ports.promServerEP }}
                protocol: TCP
              - name: ep-queues
                containerPort: {{ int $emsParams.ems.ports.promQueuesEP }}
                protocol: TCP
              - name: ep-topics
                containerPort: {{ int $emsParams.ems.ports.promTopicsEP }}
                protocol: TCP
              - name: watchdog-port
                containerPort: {{ int $emsParams.ems.ports.watchdogPort }}
                protocol: TCP
              - name: logger-port
                containerPort: {{ int $emsParams.ems.ports.loggerPort }}
                protocol: TCP
              volumeMounts:
              - mountPath: /boot
                name: scripts-vol
              - mountPath: /boot-certs
                name: certs-vol
              - mountPath: /data 
              {{ if eq "storageClass" $emsParams.ems.msgData.storageType }}
                {{ $emsNeedsVct = "yes" }}
                name: ems-data
              {{ else if eq "sharedPvc" $emsParams.ems.msgData.storageType }}
                name: ems-data
                subPathExpr: "$(MY_RELEASE)/data/$(MY_POD_NAME)"
              {{ else if eq "emptyDir" $emsParams.ems.msgData.storageType }}
                  {{ if $emsParams.ems.isProduction }}
                  {{ fail "emptyDir not applicable for Production message storage" }}
                  {{ end }}
                name: ems-data
              {{ else }} 
                {{ fail "Unsupported ems data storageType" }}
              {{ end }}
              - mountPath: /logs
              {{ if eq "storageClass" $emsParams.ems.logs.storageType }}
                {{ $emsNeedsVct = "yes" }}
                name: "ems-log"
              {{ else if eq "sharedStorageClass" $emsParams.ems.logs.storageType }}
                {{ $emsNeedsVct = "yes" }}
                name: "ems-log"
              {{ else if eq "sharedPvc" $emsParams.ems.logs.storageType }}
                {{ if eq  $emsParams.ems.logs.storageName $emsParams.ems.msgData.storageName }}
                name: "ems-data"
                {{ else }}
                name: "ems-log"
                {{ end }}
                subPathExpr: "$(MY_RELEASE)/logs"
              {{ else if eq "useMsgData" $emsParams.ems.logs.storageType }}
                name: ems-data
                subPathExpr: "$(MY_RELEASE)/logs"
              {{ else }} 
                {{ fail "Unsupported ems data storageType" }}
              {{ end }}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              env:
              {{ include "msg.envStdPodRefs" . | indent  14 }}
              - name: ACCEPT_EUA
                value: "y"
              - name: GOTRACEBACK
                value: "crash"
              - name: TCM_WATCHDOG_TYPE
                value: candidate
              - name: TCM_WATCHDOG_LOG_FILE
                value: /logs/$(MY_POD_NAME)/watchdog.log
              - name: MY_RELEASE
                value: "{{ .Release.Name }}"
              - name: REALM_PORT
                value: "{{ $emsParams.ems.ports.realmPort }}"
              - name: EMS_TCP_PORT
                value: "{{ $emsParams.ems.ports.tcpPort }}"
              - name: EMS_SSL_PORT
                value: "{{ $emsParams.ems.ports.sslPort }}"
              - name: EMS_ADMIN_PORT
                value: "{{ $emsParams.ems.ports.adminPort }}"
              - name: EMS_PROM_PORT
                value: "{{ $emsParams.ems.ports.promServerEP }}"
              - name: EMS_INIT_JSON
                value: "/logs/$(MY_POD_NAME)/boot/tibemsd-ftl.json"
              - name: EMS_HTTP_PORT
                value: "{{ $emsParams.ems.ports.httpPort }}"
              - name: EMS_SERVICE
                value: "{{ $emsParams.ems.name }}-ems"
              - name: MY_SVC_NAME
                value: "{{ $svcname }}"
              - name: MY_SVC_HOST
                value: "$(MY_POD_NAME).{{ $svcname }}.{{ .Release.Namespace }}.svc"
              - name: FTL_REALM_URL
                # the service load-balanced REALM URL
                value: "http://{{ $svcFtlHost }}:$(REALM_PORT)"
              - name: EMS_LISTEN_URLS
                value: "{{ $emsParams.ems.listens }}"
                # NOTE: below URLs can be incorrect if the customer overrides listens strangely
              {{ if .Values.ems.tcpEnable }}
              - name: EMS_TCP_URL
                # the service load-balanced EMS TCP URL
                value: "tcp://{{ $svcEmsHost }}:$(EMS_TCP_PORT),tcp://{{ $svcEmsHost }}:$(EMS_TCP_PORT)"
              {{ end }}
              {{ if .Values.ems.sslEnable }}
              - name: EMS_SSL_URL
                # the service load-balanced EMS SSL URL
                value: "ssl://{{ $svcEmsHost }}:$(EMS_SSL_PORT),ssl://{{ $svcEmsHost }}:$(EMS_SSL_PORT)"
              {{ end }}
              - name: TCM_WATCHDOG_CONFIG
                value: "/logs/$(MY_POD_NAME)/boot/watchdog.yml"
              - name: TCM_WD_PORT
                value: "{{ $emsParams.ems.ports.watchdogPort }}"
              - name: TCM_WATCHDOG_HOSTPORT
                # note: $(MY_POD_NAME) will be one of {{ $stsname }}-[012]
                value: "$(MY_POD_NAME):$(TCM_WD_PORT)"
              - name: POD_DISK_MON
                value: "/data,/logs"
              #- name: TIB_RS_CURL_VERBOSE
              #  value: "1"
            volumes:
            - name: scripts-vol
              configMap:
                name: "{{ $emsParams.ems.name }}-scripts"
            - name: certs-vol
              secret:
                secretName: "{{ $emsParams.ems.name }}-certs"
                optional: True
            - name: fluentbit-config
              configMap:
                name: "{{ $emsParams.ems.name }}-fluentbit-config"
            {{ if eq "sharedPvc" $emsParams.ems.msgData.storageType }}
            - name: "ems-data"
              persistentVolumeClaim:
                claimName: "{{ $emsParams.ems.msgData.storageName }}"
            {{ else if eq "emptyDir" $emsParams.ems.msgData.storageType }}
            - name: "ems-data"
              emptyDir: {}
            {{ end }}
            {{ if eq "sharedPvc" $emsParams.ems.logs.storageType }}
                {{ if ne  $emsParams.ems.logs.storageName $emsParams.ems.msgData.storageName }}
            - name: "ems-log"
              persistentVolumeClaim:
                claimName: "{{ $emsParams.ems.logs.storageName }}"
                {{ end }}
            {{ end }}
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext:
              # user=emsaqa, group=msgsrc
              runAsUser: {{ int $emsParams.dp.uid }}
              runAsGroup: {{ int $emsParams.dp.gid }}
              fsGroup: {{ int $emsParams.dp.gid }}
            # The service account allows access to helm/kubectl actions
            serviceAccountName: "{{ $emsParams.dp.serviceAccount }}"
            terminationGracePeriodSeconds: 10
    updateStrategy:
        type: OnDelete
    # MSG DATA ALLOCATE NEW STORAGE
    {{ if eq "yes" $emsNeedsVct }}
    volumeClaimTemplates:
      {{ if eq "storageClass" $emsParams.ems.msgData.storageType }}
      - metadata:
          name: ems-data
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "{{ $emsParams.ems.msgData.storageName }}"
          resources:
            requests:
              storage: "{{ $emsParams.ems.msgData.storageSize }}"
      {{ end }}
      {{ if eq "storageClass" $emsParams.ems.logs.storageType }}
      - metadata:
          name: ems-log
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "{{ $emsParams.ems.logs.storageName }}"
          resources:
            requests:
              storage: "{{ $emsParams.ems.logs.storageSize }}"
      {{ end }}
    {{ end }}
...
