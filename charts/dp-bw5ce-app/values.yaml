# Copyright Â© 2025. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.

# Default values for dp-bw5ce-app.

dpConfig:
  dataplaneId: ""
  capabilityInstanceId: ""
  capabilityVersion: ""
  capabilityDefaultNamespace: ""
  helmRepoAlias: ""
  activationServiceUrl: ""

appConfig:
  appId: ""
  buildId: ""
  workloadType: "user-app"
  appType: "bw5ce"
  appVersion: "1.0"
  originalAppName: ""
  bw5ceBuildTypeTag: "BW-5.16.2-TRA-5.13.1"
  bw5ceBaseImageTag: "76-5.16.2-V8-5.13.1-V8"
  tags: ""
  connectors: ""
  bwProfile: "default.substvar"
  lastUpdated: ""
  customBaseImagePath: ""

otel:
  enabled: true

serviceMesh:
  enabled: false

networkPolicy:
  internetAll: enable
  internetWeb: enable
  msgInfra: enable
  databaseEgress: enable
  proxyEgress: enable
  userApps: enable

replicaCount: 1

image:
  repository: ""
  pullPolicy: IfNotPresent
  appInitImageName: "tp-bwce-app-init"
  appInitImageTag: "52"
  fluentBitImageName: "common-fluentbit"
  fluentBitImageTag: "4.0.8"
  bw5ceBaseImageName: "tp-bw5ce-base"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
workload: "deployment"
# for future use, workload can be "statufulset", "deployment", etc

serviceAccountName: ""

deploymentAnnotations: {}

deploymentLabels: {}

podAnnotations: {}

podLabels: {}

podSecurityContext:
  fsGroup: 2001
  fsGroupChangePolicy: Always
  runAsGroup: 2001
  runAsNonRoot: true
  runAsUser: 2001
  seccompProfile:
    type: RuntimeDefault

bwapp:
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    # enabling readOnlyRootFilesystem may cause issues with supplements where files are copied in system folder example - /etc/krb5.conf
    capabilities:
      drop:
      - ALL
      - CAP_NET_RAW
  resources: {}
  #  limits:
  #    cpu: "1"
  #    memory: 4Gi
  #  requests:
  #    cpu: 250m
  #    memory: 1Gi
  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true
  envs: []
  # - name: foo
  #   value: bar
  envFrom:
    configMapRef: []
    #  - "cm1"
    secretRef: []
    #  - "secret1"
  startupProbe:
    failureThreshold: 60
    httpGet:
      path: /health/startup
      port: 8090
      scheme: HTTP
    periodSeconds: 3
    successThreshold: 1
    timeoutSeconds: 5
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /health/liveness
      port: 8090
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 6
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /health/readiness
      port: 8090
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5

fluentBit:
  enabled: true
  configMapName: "fluentbit-config-otel-bw5ce"
  securityContext:
    capabilities:
      drop:
      - ALL
      - CAP_NET_RAW
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1000
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 100Mi
  #  requests:
  #    cpu: 10m
  #    memory: 10Mi
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /api/v1/health
      port: 2020
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

appInit:
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL
      - CAP_NET_RAW
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 100Mi
  #  requests:
  #    cpu: 10m
  #    memory: 10Mi

service:
  serviceDiscoverable: true
  serviceDescription: ""
  type: ClusterIP
  ports: []
  # ports:
  #  - port: 8081
  #    targetPort: 8081
  annotations: {}
  labels: {}
  allocateLoadBalancerNodePorts: false

  # Example config for making TCP endpoint public over AWS NLB
  # type: LoadBalancer
  # allocateLoadBalancerNodePorts: false
  # ports:
  # - port: 8085
  #   targetPort: 8085
  # annotations:
  #   kubernetes.io/ingress.class: alb
  #   service.beta.kubernetes.io/aws-load-balancer-attributes: load_balancing.cross_zone.enabled=false
  #   service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
  #   service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
  #   service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true
  #   service.beta.kubernetes.io/aws-load-balancer-type: external

ingress:
  enabled: false
  className: ""
  controllerName: ""
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  rules:
    - host: example.com
      paths:
        - path: /
          pathType: Prefix
          port: 8081
          serviceDiscoverable: true
          serviceDescription: ""
          customCRDConfig: {}
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior: {}
  customMetrics: []

# enable or disable the resources volume mounts. these are required for readOnlyRootFilesystem security context, default is true
enableResourcesVolumes: true

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

pvc: []
#  - name: "persistenceA"
#    accessModes:
#    - ReadWriteOnce
#    volumeMode: "Filesystem"
#    size: "1Gi"
#    storageClass: "standard"
#    selector: {}

hostAliases: []

strategy:
  type: RollingUpdate

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

appProps: {}
#  default.substvar:
#    appprop1: value1
#    appprop2: value2

engineProps: {}
#  test1: value1

appSecrets: {}
#  default.substvar:
#    apppropsec1: value1
#    apppropsec2: value2

engineSecrets: {}
#  test1: value1

# additional Custom Resource Definition(CRD) to be created
crds: []
#  - apiVersion: apiextensions.k8s.io/v1
#    kind: CustomResourceDefinition
#    metadata:
#      name: crd1
#    spec:
#      group: example.com
