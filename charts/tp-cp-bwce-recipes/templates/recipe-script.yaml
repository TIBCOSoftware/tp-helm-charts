# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "dp-bwce-recipes.appName" . }}-script
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dp-bwce-recipes.labels" . | nindent 4 }}
data:
  run.sh: |
    #!/busybox/sh
    
    set -euo pipefail

    echo "Capability name: ${CAPABILITY_NAME}"
    echo "Recipe mount location: ${RECIPE_MOUNT_LOCATION}"
    echo "Recipe tagret location: ${RECIPE_TARGET_LOCATION}"
    echo "Recipe release version: ${RECIPE_RELEASE_VERSION}"
    echo "Recipe overwrite behaviour enabled: ${OVERWRITE_RECIPE}"

    VERSION_FILE_NAME=version.json
    LATEST_VERSION_FILE_NAME=latest.json
    PACKAGE_FILE_NAME=package.json
    RECIPE_FILE_NAME=recipe.yaml
    VERSIONS_FILE_NAME=versions.json

    mkdir -p ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}

    changed=false

    if [ "${OVERWRITE_RECIPE}" = true ]; then
      echo "Overwriting the recipes at ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/"
      cp ${RECIPE_MOUNT_LOCATION}/${VERSION_FILE_NAME} ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/.
      cp ${RECIPE_MOUNT_LOCATION}/${PACKAGE_FILE_NAME} ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/.
      cp ${RECIPE_MOUNT_LOCATION}/${RECIPE_FILE_NAME} ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/.
      changed=true
    else
      if [ ! -f ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/${VERSION_FILE_NAME} ]; then
        echo "Copying the ${VERSION_FILE_NAME} at ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/"
        cp ${RECIPE_MOUNT_LOCATION}/${VERSION_FILE_NAME} ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/.
        changed=true
      fi
      if [ ! -f ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/${PACKAGE_FILE_NAME} ]; then
        echo "Copying the ${PACKAGE_FILE_NAME} at ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/"
        cp ${RECIPE_MOUNT_LOCATION}/${PACKAGE_FILE_NAME} ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/.
        changed=true
      fi
      if [ ! -f ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/${RECIPE_FILE_NAME} ]; then
        echo "Copying the ${RECIPE_FILE_NAME} at ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/"
        cp ${RECIPE_MOUNT_LOCATION}/${RECIPE_FILE_NAME} ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${RECIPE_RELEASE_VERSION}/.
        changed=true
      fi
    fi

    if [ "${IS_LATEST}" = true ]; then 
      echo "Copying the ${VERSION_FILE_NAME} at ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${LATEST_VERSION_FILE_NAME}"
      cp ${RECIPE_MOUNT_LOCATION}/${VERSION_FILE_NAME} ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${LATEST_VERSION_FILE_NAME}
    fi

    # delete unsupported versions
    for unsupported_recipe_version in ${SPACE_SEPARATED_UNSUPPORTED_RECIPE_VERSIONS}; do
      echo "Deleting unsupported recipe version ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${unsupported_recipe_version}"
      rm -rf ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${unsupported_recipe_version}
      changed=true
    done

    if [ ${changed} = "true" ]; then
      # populate the versions.json file
      VERSIONS_FILE_CONTENT="["       # start of json array
      for versionDir in ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/*/
      do
          versionDir=${versionDir%*/}        # remove the trailing "/"
          versionContent=`cat ${versionDir}/${VERSION_FILE_NAME}`
          VERSIONS_FILE_CONTENT="${VERSIONS_FILE_CONTENT} ${versionContent}"

          if [ ${#VERSIONS_FILE_CONTENT} -gt 1 ]; then
            VERSIONS_FILE_CONTENT="${VERSIONS_FILE_CONTENT},"
          fi
      done

      VERSIONS_FILE_CONTENT=${VERSIONS_FILE_CONTENT::-1}    # remove last comma

      VERSIONS_FILE_CONTENT="${VERSIONS_FILE_CONTENT} ]"    # end of json array

      echo ${VERSIONS_FILE_CONTENT} > ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${VERSIONS_FILE_NAME}

      echo "Populated ${RECIPE_TARGET_LOCATION}/${CAPABILITY_NAME}/${VERSIONS_FILE_NAME} as ${VERSIONS_FILE_CONTENT}"
    else
      echo "Recipes are already present"
    fi

    echo "== DONE =="



