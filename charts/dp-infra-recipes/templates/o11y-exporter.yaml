# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "dp-infra-recipes.appName" . }}-o11y-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dp-infra-recipes.labels" . | nindent 4 }}
data:
  version.json: |
    {
      "capabilityVersion": "1.1.0",
      "minCPVersion": "1.1.0",
      "maxCPVersion": "",
      "releaseDate": {{ .Values.capabilities.o11yExporter.releaseDate | quote }},
      "releaseNotes": {{ .Values.capabilities.o11yExporter.releaseNotes | quote }},
      "minVersionRequiredForUpgrade": "1.0.0"
    }
  package.json: |
    {
      "package": {
        "services": [
          {
            "name": "o11y-service",
            "description": "o11y Service",
            "monitoringPriority": "essential"
          },
          {
            "name": "jaeger-collector",
            "description": "jaeger collector",
            "monitoringPriority": "essential"
          },
          {
            "name": "jaeger-query",
            "description": "jaeger query",
            "monitoringPriority": "essential"
          },
          {
            "name": "otel-userapp",
            "description": "otel userapp",
            "monitoringPriority": "essential"
          },
          {
            "name": "otel-finops",
            "description": "otel finops",
            "monitoringPriority": "essential"
          },
          {
            "name": "otel-services",
            "description": "otel services",
            "monitoringPriority": "essential"
          }
        ],
        "dependsOn": [],
        "provisioningRoles": [
          "DEV_OPS"
        ],
        "allowMultipleInstances": false
      }
    }
  recipe.yaml: |
    recipe:
      deploymentStrategy: "weighted-concurrency"
      helmCharts:
        - name: o11yservice
          namespace: ${NAMESPACE}
          version: {{ .Values.capabilities.o11yExporter.o11yservice.version | quote }}
          repository:
            chartMuseum:
              host: ${HELM_REPO}
          flags:
            install: true
            createNamespace: false
            dependencyUpdate: true
        - name: opentelemetry-collector
          namespace: ${NAMESPACE}
          releaseName: otel-userapp
          version: {{ .Values.capabilities.o11yExporter.opentelemetryCollector.version | quote }}
          repository:
            chartMuseum:
              host: ${HELM_REPO}
          values:
            - content: |
                mode: "deployment"
                fullnameOverride: otel-userapp
                podLabels:
                  networking.platform.tibco.com/kubernetes-api: enable
                  egress.networking.platform.tibco.com/internet-all: enable
                autoscaling:
                  enabled: false
                  minReplicas: 1
                  maxReplicas: 3
                  behavior:
                    scaleUp:
                      stabilizationWindowSeconds: 15
                    scaleDown:
                      stabilizationWindowSeconds: 15
                  targetCPUUtilizationPercentage: 80
                  targetMemoryUtilizationPercentage: 80
                serviceAccount:
                  create: false
                  name: ${SERVICE-ACCOUNT}
                extraEnvs:
                  - name: KUBE_NODE_NAME
                    valueFrom:
                      fieldRef:
                        apiVersion: v1
                        fieldPath: spec.nodeName
                extraEnvsFrom:
                  - secretRef:
                      name: o11y-service
                  - configMapRef:
                      name: o11y-service
                ports:
                  otlp:
                    enabled: true
                    containerPort: 4317
                    servicePort: 4317
                    hostPort: 4317
                    protocol: TCP
                    # nodePort: 30317
                    appProtocol: grpc
                  otlp-http:
                    enabled: true
                    containerPort: 4318
                    servicePort: 4318
                    hostPort: 4318
                    protocol: TCP
                config:
                  receivers:
                    otlp:
                      protocols:
                        grpc:
                          endpoint: 0.0.0.0:4317
                        http:
                          cors:
                            allowed_origins:
                              - http://*
                              - https://*
                          endpoint: 0.0.0.0:4318
                  processors:
                    memory_limiter:
                      check_interval: 5s
                      limit_percentage: 80
                      spike_limit_percentage: 25
                    batch: {}
                    k8sattributes/general:
                      auth_type: "serviceAccount"
                      passthrough: false
                      extract:
                        metadata:
                          - k8s.pod.name
                          - k8s.pod.uid
                          - k8s.namespace.name
                          - k8s.pod.start_time
                        annotations:
                          - tag_name: connectors
                            key: platform.tibco.com/connectors
                            from: pod
                        labels:
                          - tag_name: app_id
                            key: platform.tibco.com/app-id
                            from: pod
                          - tag_name: app_type
                            key: platform.tibco.com/app-type
                            from: pod
                          - tag_name: dataplane_id
                            key: platform.tibco.com/dataplane-id
                            from: pod
                          - tag_name: workload_type
                            key: platform.tibco.com/workload-type
                            from: pod
                          - tag_name: app_name
                            key: platform.tibco.com/app-name
                            from: pod
                          - tag_name: app_version
                            key: platform.tibco.com/app-version
                            from: pod
                          - tag_name: app_tags
                            key: platform.tibco.com/tags
                            from: pod
                          - tag_name: capability_instance_id
                            key: platform.tibco.com/capability-instance-id
                            from: pod
                    transform/logs:
                      log_statements:
                      - context: log
                        statements:
                        - set(resource.attributes["pod_namespace"], resource.attributes["k8s.namespace.name"])
                        - set(resource.attributes["pod_name"], resource.attributes["k8s.pod.name"])
                        - set(resource.attributes["pod_uid"], resource.attributes["k8s.pod.uid"])
                        - delete_key(resource.attributes, "k8s.namespace.name")
                        - delete_key(resource.attributes, "k8s.pod.name")
                        - delete_key(resource.attributes, "k8s.pod.uid")
                        - delete_key(resource.attributes, "k8s.pod.ip")
                    transform/traces:
                      trace_statements:
                      - context: span
                        statements:
                          - set(attributes["pod_name"], resource.attributes["k8s.pod.name"])
                          - set(attributes["pod_namespace"], resource.attributes["k8s.namespace.name"])
                          - set(attributes["app_id"], resource.attributes["app_id"])
                          - set(attributes["app_type"], resource.attributes["app_type"])
                          - set(attributes["dataplane_id"], resource.attributes["dataplane_id"])
                          - set(attributes["workload_type"], resource.attributes["workload_type"])
                          - set(attributes["app_tags"], resource.attributes["app_tags"])
                          - set(attributes["app_name"], resource.attributes["app_name"])
                          - set(attributes["app_version"], resource.attributes["app_version"])
                          - set(attributes["capability_instance_id"], resource.attributes["capability_instance_id"])
                  exporters:
                    elasticsearch/log:
                      endpoints:
                      - ${env:ES_SERVER_EXPORTER_ENDPOINT}
                      logs_index: ${env:ES_EXPORTER_LOG_INDEX_NAME}
                      user: ${env:ES_EXPORTER_LOG_INDEX_USERNAME}
                      password: ${env:ES_EXPORTER_LOG_INDEX_PASSWORD}
                      retry:
                        enabled: false
                      tls:
                        insecure: false
                        insecure_skip_verify: true
                    otlp/trace:
                      endpoint: ${env:JAEGER_COLLECTOR_ENDPOINT}
                      tls:
                        insecure: true
                  extensions:
                    health_check: {}
                    memory_ballast:
                      size_in_percentage: 40
                  service:
                    telemetry:
                      logs: {}
                      metrics:
                        address: :8888
                    extensions:
                      - health_check
                      - memory_ballast
                    pipelines:
                      logs:
                        receivers:
                          - otlp
                        processors:
                          - k8sattributes/general
                          - transform/logs
                          - memory_limiter
                          - batch
                        exporters:
                          - elasticsearch/log
                      traces:
                        receivers:
                          - otlp
                        processors:
                          - k8sattributes/general
                          - transform/traces
                          - memory_limiter
                          - batch
                        exporters:
                          - otlp/trace
          flags:
            install: true
            createNamespace: false
            dependencyUpdate: true
            isDevTesting: true
        - name: opentelemetry-collector
          namespace: ${NAMESPACE}
          releaseName: otel-userapp-metrics
          version: {{ .Values.capabilities.o11yExporter.opentelemetryCollector.version | quote }}
          repository:
            chartMuseum:
              host: ${HELM_REPO}
          values:
            - content: |
                mode: "deployment"
                fullnameOverride: otel-userapp-metrics
                podLabels:
                  networking.platform.tibco.com/kubernetes-api: enable
                  egress.networking.platform.tibco.com/internet-all: enable
                  prometheus.io/scrape: "true"
                  prometheus.io/path: "metrics"
                  prometheus.io/port: "4319"
                serviceAccount:
                  create: false
                  name: ${SERVICE-ACCOUNT}
                extraEnvs:
                  - name: KUBE_NODE_NAME
                    valueFrom:
                      fieldRef:
                        apiVersion: v1
                        fieldPath: spec.nodeName
                extraEnvsFrom:
                  - secretRef:
                      name: o11y-service
                  - configMapRef:
                      name: o11y-service
                ports:
                  otlp:
                    enabled: true
                    containerPort: 4317
                    servicePort: 4317
                    hostPort: 4317
                    protocol: TCP
                    # nodePort: 30317
                    appProtocol: grpc
                  otlp-http:
                    enabled: true
                    containerPort: 4318
                    servicePort: 4318
                    hostPort: 4318
                    protocol: TCP
                  metrics:
                    enabled: true
                    containerPort: 8888
                    servicePort: 8888
                    hostPort: 8888
                    protocol: TCP
                  prometheus:
                    enabled: true
                    containerPort: 4319
                    servicePort: 4319
                    hostPort: 4319
                    protocol: TCP
                config:
                  receivers:
                    otlp:
                      protocols:
                        grpc:
                          endpoint: 0.0.0.0:4317
                        http:
                          cors:
                            allowed_origins:
                              - http://*
                              - https://*
                          endpoint: 0.0.0.0:4318
                    prometheus:
                      config:
                        scrape_configs:
                          - job_name: monitoring-agent
                            scrape_interval: 20s
                            kubernetes_sd_configs:
                            - role: service
                            relabel_configs:
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_prometheus_io_scrape]
                              regex: "true"
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
                              regex: "tp-dp-monitor-agent"
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_platform_tibco_com_dataplane_id]
                              regex: "${DATAPLANE-ID}"
                            - action: replace
                              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                              target_label: __metrics_path__
                              regex: (.+)
                          - job_name: envoy-stats
                            scrape_interval: 20s
                            kubernetes_sd_configs:
                            - role: pod
                            relabel_configs:
                            - action: keep
                              source_labels: [__meta_kubernetes_pod_label_prometheus_io_scrape]
                              regex: "true"
                            - action: keep
                              source_labels: [__meta_kubernetes_pod_container_port_name]
                              regex: ".*-envoy-prom"
                            - action: keep
                              source_labels: [__meta_kubernetes_pod_label_platform_tibco_com_dataplane_id]
                              regex: "${DATAPLANE-ID}"
                            - action: replace
                              source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                              target_label: __metrics_path__
                              regex: (.+)
                          - job_name: ems-svc
                            scrape_interval: 20s
                            kubernetes_sd_configs:
                            - role: service
                            relabel_configs:
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_platform_tibco_com_scrape_o11y]
                              regex: "true"
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_platform_tibco_com_dataplane_id]
                              regex: "${DATAPLANE-ID}"
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_platform_tibco_com_workload_type]
                              regex: "capability-service"
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_tib_msg_group_name]
                              regex: (.+)
                            - action: replace
                              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                              target_label: __metrics_path__
                              regex: (.+)
                  processors:
                    memory_limiter:
                      check_interval: 5s
                      limit_percentage: 80
                      spike_limit_percentage: 25
                    batch: {}
                    k8sattributes/general:
                      auth_type: "serviceAccount"
                      passthrough: false
                      extract:
                        metadata:
                          - k8s.pod.name
                          - k8s.pod.uid
                          - k8s.namespace.name
                          - k8s.pod.start_time
                        annotations:
                          - tag_name: connectors
                            key: platform.tibco.com/connectors
                            from: pod
                        labels:
                          - tag_name: app_id
                            key: platform.tibco.com/app-id
                            from: pod
                          - tag_name: app_type
                            key: platform.tibco.com/app-type
                            from: pod
                          - tag_name: dataplane_id
                            key: platform.tibco.com/dataplane-id
                            from: pod
                          - tag_name: workload_type
                            key: platform.tibco.com/workload-type
                            from: pod
                          - tag_name: app_name
                            key: platform.tibco.com/app-name
                            from: pod
                          - tag_name: app_version
                            key: platform.tibco.com/app-version
                            from: pod
                          - tag_name: app_tags
                            key: platform.tibco.com/tags
                            from: pod
                          - tag_name: capability_instance_id
                            key: platform.tibco.com/capability-instance-id
                            from: pod
                    k8sattributes/pa:
                      auth_type: "serviceAccount"
                      passthrough: false
                      pod_association:
                      - sources:
                        - from: resource_attribute
                          name: k8s.pod.uid
                      - sources:
                        - from: resource_attribute
                          name: k8s.pod.name
                        - from: resource_attribute
                          name: k8s.namespace.name
                      extract:
                        metadata:
                          - k8s.pod.name
                          - k8s.pod.uid
                          - k8s.namespace.name
                          - k8s.pod.start_time
                        annotations:
                          - tag_name: connectors
                            key: platform.tibco.com/connectors
                            from: pod
                        labels:
                          - tag_name: app_id
                            key: platform.tibco.com/app-id
                            from: pod
                          - tag_name: app_type
                            key: platform.tibco.com/app-type
                            from: pod
                          - tag_name: dataplane_id
                            key: platform.tibco.com/dataplane-id
                            from: pod
                          - tag_name: workload_type
                            key: platform.tibco.com/workload-type
                            from: pod
                          - tag_name: app_name
                            key: platform.tibco.com/app-name
                            from: pod
                          - tag_name: app_version
                            key: platform.tibco.com/app-version
                            from: pod
                          - tag_name: app_tags
                            key: platform.tibco.com/tags
                            from: pod
                          - tag_name: capability_instance_id
                            key: platform.tibco.com/capability-instance-id
                            from: pod
                          - tag_name: app_type
                            key: tib-dp-app
                            from: pod
                          - tag_name: tib-msg-group-name
                            key: tib-msg-group-name
                            from: pod
                    transform/metrics:
                      metric_statements:
                      - context: datapoint
                        statements:
                        - set(resource.attributes["k8s.pod.name"], attributes["Host"]) where resource.attributes["k8s.pod.uid"] == nil
                        - set(attributes["app_tags"], attributes["tags"]) where attributes["tags"] != ""
                        - delete_key(attributes, "tags") where attributes["tags"] != ""
                  exporters:
                    prometheus/user:
                      endpoint: 0.0.0.0:4319
                      enable_open_metrics: true
                      resource_to_telemetry_conversion:
                        enabled: true
                  extensions:
                    health_check: {}
                    memory_ballast:
                      size_in_percentage: 40
                  service:
                    telemetry:
                      logs: {}
                      metrics:
                        address: :8888
                    extensions:
                      - health_check
                      - memory_ballast
                    pipelines:
                      metrics/appengines:
                        receivers:
                          - otlp
                        processors:
                          - k8sattributes/general
                          - memory_limiter
                          - batch
                        exporters:
                          - prometheus/user
                      metrics/prom:
                        receivers:
                          - prometheus
                        processors:
                          - transform/metrics
                          - k8sattributes/pa
                          - memory_limiter
                          - batch
                        exporters:
                          - prometheus/user
          flags:
            install: true
            createNamespace: false
            dependencyUpdate: true
            isDevTesting: true
        - name: opentelemetry-collector
          namespace: ${NAMESPACE}
          releaseName: otel-finops
          version: {{ .Values.capabilities.o11yExporter.opentelemetryCollector.version | quote }}
          repository:
            chartMuseum:
              host: ${HELM_REPO}
          values:
            - content: |
                mode: "deployment"
                fullnameOverride: otel-finops
                podLabels:
                  networking.platform.tibco.com/kubernetes-api: enable
                  egress.networking.platform.tibco.com/internet-all: enable
                serviceAccount:
                  create: false
                  name: ${SERVICE-ACCOUNT}
                extraEnvsFrom:
                  - configMapRef:
                      name: o11y-service
                ports:
                  otlp-http:
                    enabled: true
                    containerPort: 4318
                    servicePort: 4318
                    hostPort: 4318
                    protocol: TCP
                  metrics:
                    enabled: true
                    containerPort: 8888
                    servicePort: 8888
                    hostPort: 8888
                    protocol: TCP
                  prometheus:
                    enabled: true
                    containerPort: 4319
                    servicePort: 4319
                    hostPort: 4319
                    protocol: TCP
                config:
                  receivers:
                    prometheus/finops:
                      config:
                        scrape_configs:
                          - job_name: monitoring-agent
                            scrape_interval: 60s
                            kubernetes_sd_configs:
                            - role: service
                            relabel_configs:
                            - action: keep
                              source_labels: [__meta_kubernetes_service_label_platform_tibco_com_scrape_finops]
                              regex: "true"
                            - action: keep
                              regex: "true"
                              source_labels:
                              - __meta_kubernetes_service_label_prometheus_io_scrape
                            - action: keep
                              regex: ${DATAPLANE-ID}
                              source_labels:
                              - __meta_kubernetes_service_label_platform_tibco_com_dataplane_id
                            - action: replace
                              regex: (.+)
                              source_labels:
                              - __meta_kubernetes_service_annotation_prometheus_io_path
                              target_label: __metrics_path__
                  processors:
                    memory_limiter:
                      check_interval: 1s
                      limit_mib: 2000
                    batch: {}
                    attributes/finops:
                      actions:
                      - key: dataplane_id
                        action: insert
                        value: ${DATAPLANE-ID}
                  exporters:
                    logging: {}
                    otlphttp/finops:
                      metrics_endpoint: http://cp-proxy/finops/finops-service/api/v1/proxy
                  service:
                    telemetry:
                      logs: {}
                      metrics:
                        address: :8888
                    extensions:
                      - health_check
                      - memory_ballast
                    pipelines:
                      metrics:
                        exporters:
                          - logging
                          - otlphttp/finops
                        processors:
                          - memory_limiter
                          - batch
                          - attributes/finops
                        receivers:
                          - prometheus/finops
          flags:
            install: true
            createNamespace: false
            dependencyUpdate: true
            isDevTesting: true
        - name: opentelemetry-collector
          namespace: ${NAMESPACE}
          releaseName: otel-services
          version: {{ .Values.capabilities.o11yExporter.opentelemetryCollector.version | quote }}
          repository:
            chartMuseum:
              host: ${HELM_REPO}
          values:
            - content: |
                mode: "deployment"
                fullnameOverride: otel-services
                podLabels:
                  networking.platform.tibco.com/kubernetes-api: enable
                  egress.networking.platform.tibco.com/internet-all: enable
                serviceAccount:
                  create: false
                  name: ${SERVICE-ACCOUNT}
                extraEnvsFrom:
                  - secretRef:
                      name: o11y-service
                  - configMapRef:
                      name: o11y-service
                ports:
                  otlp:
                    enabled: true
                    containerPort: 4317
                    servicePort: 4317
                    hostPort: 4317
                    protocol: TCP
                    # nodePort: 30317
                    appProtocol: grpc
                  otlp-http:
                    enabled: true
                    containerPort: 4318
                    servicePort: 4318
                    hostPort: 4318
                    protocol: TCP
                  metrics:
                    enabled: true
                    containerPort: 8888
                    servicePort: 8888
                    hostPort: 8888
                    protocol: TCP
                  prometheus:
                    enabled: true
                    containerPort: 4319
                    servicePort: 4319
                    hostPort: 4319
                    protocol: TCP
                config:
                  receivers:
                    otlp:
                      protocols:
                        grpc:
                          endpoint: 0.0.0.0:4317
                        http:
                          cors:
                            allowed_origins:
                              - http://*
                              - https://*
                          endpoint: 0.0.0.0:4318
                  processors:
                    memory_limiter:
                      check_interval: 1s
                      limit_mib: 2000
                    k8sattributes/general:
                      auth_type: "serviceAccount"
                      passthrough: false
                      extract:
                        metadata:
                          - k8s.pod.name
                          - k8s.pod.uid
                          - k8s.namespace.name
                        labels:
                          - tag_name: dataplane_id
                            key: platform.tibco.com/dataplane-id
                            from: pod
                          - tag_name: workload_type
                            key: platform.tibco.com/workload-type
                            from: pod
                    batch: {}
                  exporters:
                    elasticsearch/log:
                      endpoints:
                      - ${env:ES_SERVER_SERVICE_ENDPOINT}
                      logs_index: ${env:ES_SERVICE_LOG_INDEX_NAME}
                      user: ${env:ES_SERVICE_LOG_INDEX_USERNAME}
                      password: ${env:ES_SERVICE_LOG_INDEX_PASSWORD}
                      retry:
                        enabled: false
                      tls:
                        insecure: false
                        insecure_skip_verify: true
                  extensions:
                    health_check: {}
                    memory_ballast:
                      size_in_percentage: 40
                  service:
                    telemetry:
                      logs: {}
                      metrics:
                        address: :8888
                    extensions:
                      - health_check
                      - memory_ballast
                    pipelines:
                      logs:
                        exporters:
                          - elasticsearch/log
                        processors:
                          - k8sattributes/general
                          - memory_limiter
                          - batch
                        receivers:
                          - otlp
          flags:
            install: true
            createNamespace: false
            dependencyUpdate: true
            isDevTesting: true
        - name: jaeger
          namespace: ${NAMESPACE}
          releaseName: jaeger
          version: {{ .Values.capabilities.o11yExporter.jaeger.version | quote }}
          repository:
            chartMuseum:
              host: ${HELM_REPO}
          values:
            - content: |
                provisionDataStore:
                  cassandra: false
                  elasticsearch: false
                storage:
                  type: elasticsearch
                  elasticsearch:
                    tags-as-fields:
                      all: true
                    tls:
                      enabled: false
                      secretName: jaeger-elasticsearch
                agent:
                  enabled: false
                query:
                  fullnameOverride: jaeger-query
                  basePath: /o11y/v1/traceproxy/${DATAPLANE-ID}
                  podLabels:
                    networking.platform.tibco.com/kubernetes-api: enable
                    egress.networking.platform.tibco.com/internet-all: enable
                  extraConfigmapMounts:
                    - name: jaeger-config
                      mountPath: /jaeger/config
                      subPath: ""
                      configMap: o11y-service
                      readOnly: true
                  serviceAccount:
                    create: false
                    name: ${SERVICE-ACCOUNT}
                  ingress:
                    enabled: false
                    ingressClassName: haproxy-dp-${DATAPLANE-ID}
                    annotations:
                      haproxy.org/cors-enable: "true"
                      haproxy.org/load-balance: leastconn
                      haproxy.org/src-ip-header: X-Real-IP
                      haproxy.org/timeout-http-request: 600s
                      ingress.kubernetes.io/rewrite-target: /
                      meta.helm.sh/release-name: jaeger
                    pathType: Prefix
                    hosts:
                      -
                  oAuthSidecar:
                    enabled: false
                  agentSidecar:
                    enabled: false
                  cmdlineParams:
                    es.version: 7
                    es.tls.enabled: true
                    es.tls.skip-host-verify: true
                    query.ui-config: /jaeger/config/jaeger-ui-config.json
                collector:
                  fullnameOverride: jaeger-collector
                  podLabels:
                    networking.platform.tibco.com/kubernetes-api: enable
                    egress.networking.platform.tibco.com/internet-all: enable
                  serviceAccount:
                    create: false
                    name: ${SERVICE-ACCOUNT}
                  autoscaling:
                    enabled: false
                    minReplicas: 2
                    maxReplicas: 10
                    behavior:
                      targetCPUUtilizationPercentage: 80
                      targetMemoryUtilizationPercentage: 80
                  cmdlineParams:
                    es.version: 7
                    es.create-index-templates: "false"
                    es.tls.enabled: true
                    es.tls.skip-host-verify: true
                  service:
                    otlp:
                      grpc:
                        name: otlp-grpc
                        port: 4317
                      http:
                        name: otlp-http
                        port: 4318
          flags:
            install: true
            createNamespace: false
            dependencyUpdate: true
            isDevTesting: true

---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "dp-infra-recipes.appName" . }}-o11y-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dp-infra-recipes.labels" . | nindent 4 }}
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 3600
  template:
    metadata:
      labels:
        {{- include "dp-infra-recipes.labels" . | nindent 8 }}
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: o11y
        image: {{ include "dp-infra-recipes.image.registry" .}}{{"/"}}{{ include "dp-infra-recipes.image.repository" .}}{{"/"}}{{ .Values.image.name }}:{{ .Values.image.tag}}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: CAPABILITY_NAME
          value: "o11y"
        - name: RECIPE_MOUNT_LOCATION
          value: "/opt/tibco/recipe"
        - name: RECIPE_TARGET_LOCATION
          value: "/private/tsc/config/capabilities/platform"
        - name: RECIPE_RELEASE_VERSION
          value: "1.1.0"
        - name: SPACE_SEPARATED_UNSUPPORTED_RECIPE_VERSIONS
          value: ""
        - name: OVERWRITE_RECIPE
          value: {{ .Values.capabilities.o11yExporter.overwriteRecipe | quote }}
        - name: IS_LATEST
          value: {{ .Values.capabilities.o11yExporter.isLatest | quote }}
        volumeMounts:
        - name: {{ include "dp-infra-recipes.appName" . }}-o11y-exporter-volume
          mountPath: /opt/tibco/recipe
        - name: scripts-config-volume
          mountPath: /opt/tibco/scripts
        - name: store-vol
          mountPath: /private/tsc/config
          subPath: tsc/config
        command: ["sh"]
        args: ["-c", "/opt/tibco/scripts/run.sh"]
      restartPolicy: Never
      volumes:
        - name: {{ include "dp-infra-recipes.appName" . }}-o11y-exporter-volume
          configMap:
            name: {{ include "dp-infra-recipes.appName" . }}-o11y-exporter
        - name: scripts-config-volume
          configMap:
            name: {{ include "dp-infra-recipes.appName" . }}-script
            defaultMode: 0777
        - name: store-vol
          persistentVolumeClaim:
            claimName: {{ include "dp-infra-recipes.pvc-name" . }}
      imagePullSecrets:
        - name: {{ include "dp-infra-recipes.container-registry.secret" . }}