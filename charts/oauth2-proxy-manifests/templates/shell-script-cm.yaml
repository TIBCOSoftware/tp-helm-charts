# Copyright Â© 2023. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "oauth2-proxy.fullname" . }}-shell-script-cm
  namespace: {{ template "oauth2-proxy.namespace" $ }}
data:
  iat_to_clienid.sh: |
    #!/bin/sh
    apk update && apk add curl jq
    set +x
    body='{
      "client_name": "OAuth2_Proxy_{{ .Values.global.cp.instanceId }}_{{ now | unixEpoch }}",
      "scope": "TSC",
      "token_endpoint_auth_method": "client_secret_basic",
      "instance_id": "{{ .Values.global.cp.instanceId }}",
      "redirect_uris": [
        "https://{{ .Values.global.cp.resources.ingress.fqdn }}{{ .Values.global.cp.capability.pathPrefix }}/oauth2/callback"
      ],
      "backchannel_logout_uri":  "https://{{ .Values.global.cp.resources.ingress.fqdn }}{{ .Values.global.cp.capability.pathPrefix }}/oauth2/sign_out_tibx",
      "backchannel_logout_secondary_key_required": true
    }'

    exchangeIatForClientId () {
      response=$(curl -s https://{{ .Values.global.cp.cpHostname }}/idm/v1/oauth2/clients/register --header "Authorization: Bearer {{ .Values.global.cp.secrets.iat }}" --data "${body}" --header 'Content-Type: application/json')
      clientId=$(echo -n "$response" | jq -rj .client_id | base64)
      clientSecret=$(echo -n "$response" | jq -rj .client_secret | base64)
      if [ -z "$clientId" ] || [ "$clientId" = "bnVsbA==" ] # bnVsbA== is 'null' base64encoded
      then
        echo "Failed to register client. Existing"
        exit 1
      fi
    }

    getSecret () {
      http_code=$(curl -s -o /dev/null -w "%{http_code}\\n" https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ template "oauth2-proxy.namespace" $ }}/secrets/{{ template "oauth2-proxy.secretName" $ }} \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        --header 'Content-Type: application/yaml')
        return "$http_code"
    }

    updateSecret () {
      http_code=$(curl -s -o /dev/null -w "%{http_code}\\n" https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ template "oauth2-proxy.namespace" $ }}/secrets/{{ template "oauth2-proxy.secretName" $ }} \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        --header 'Content-Type: application/yaml' \
        -X PUT \
        -d "
        apiVersion: v1
        kind: Secret
        metadata:
            name: {{ template "oauth2-proxy.secretName" $ }}
            namespace: {{ template "oauth2-proxy.namespace" $ }}
            labels:
              app.kubernetes.io/instance: oauth2-proxy
              app.kubernetes.io/part-of: {{ template "oauth2-proxy.fullname" . }}            
        type: Opaque
        data:
          client-id: $clientId
          client-secret: $clientSecret
          cookie-secret: $(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c32 | base64)
        ")
        return "$http_code"
    }

    createSecret () {
      http_code=$(curl -s -o /dev/null -w "%{http_code}\\n" https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ template "oauth2-proxy.namespace" $ }}/secrets \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        --header 'Content-Type: application/yaml' \
        -X POST \
        -d "
        apiVersion: v1
        kind: Secret
        metadata:
            name: {{ template "oauth2-proxy.secretName" $ }}
            namespace: {{ template "oauth2-proxy.namespace" $ }}
            labels:
              app.kubernetes.io/instance: oauth2-proxy
              app.kubernetes.io/part-of: {{ template "oauth2-proxy.fullname" . }}
        type: Opaque
        data:
          client-id: $clientId
          client-secret: $clientSecret
          cookie-secret: $(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c32 | base64)
        ")
    }

    deleteSecret () {
      http_code=$(curl -s -o /dev/null -w "%{http_code}\\n" https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ template "oauth2-proxy.namespace" $ }}/secrets/{{ template "oauth2-proxy.secretName" $ }} \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        --header 'Content-Type: application/yaml' \
        -X DELETE
        )
    }

    # creates the secret if it does not exist
    initialize () {
      echo "Initializing Oauth2 Proxy.."
      getSecret
      if [ "$http_code" -eq 200 ]; then
          echo "Secret exists. We will not register new client."
          exit 0
      else
          echo "Registering new client.."
          exchangeIatForClientId
          createSecret
      fi
      if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
          echo "Secret created. Initialized successfully."
          exit 0
      fi
      echo "Client registration failed. Aborting!"
      exit "$http_code"
    }

    # deletes the secret if it does not exist
    cleanup () {
      echo "Uninstalling Oauth2 Proxy.."
      deleteSecret
      if [ "$http_code" -eq 200 ]; then
          echo "Deleted the secret successfully."
          exit 0
      fi
      echo "Error! Could not delete the secret!"
      exit 0
    }


    